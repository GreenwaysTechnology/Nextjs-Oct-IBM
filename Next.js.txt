			 									 Next.js
...........................................................................................................................................................................................................................................

Software Req:

1.Node.js
2.VSCODE

Pre Knowledge:

1.JavaScript
2.React fundamentals

What you are going to learn?

1.Next.js UI development
2.REST api development
3.Database Programming Using Prisma ORM Framework
4.GraphQL with Apollo Framework
5.Connecting Next.js with Apollo Framework
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				
											Next js 
...................................................................................................................................................................................................................................
What is Next?
		 Next is a flexible "React framework" that gives you building blocks to create fast "web applications".

What is React?
         	React is JavaScript lib to build "Single Page Web applications"/SPA 

What is web app?
  Type of distributed app, deployed at server , accessed over network(internet) vi various network protocols like http,  tcp, smtp...
  Web apps works based on request and response model.
  Web apps are hosted on server called web server.

Web server receives request , runs a program, that program returns response to the client.

Response would be document.
=>HTML

other responses types
XML,JSON, Documents, images, videos.........

What is web and why it was created?

  	Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN. The web was originally conceived and developed to meet the demand for automated information-sharing between scientists in universities and institutes around the world.

The first Web browser is line mode web browser, launched in 1992.
The first web server is NeXT computer
The first web page , launched http://info.cern.ch/hypertext/WWW/TheProject.html


Technology stack:
................
1.HTML
2.Webserver - Next Computer
3.LineMode Web Browser
4.HTTP protocol.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&	
											Types of Web application
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

1.Static web applications - 1989 to 1995

    Hard coded html pages, Prepared html pages kept at server, the web server will send those html pages to clients - browsers

Do you think Static web applications still exits?
  Yes!, but we don't prepare the html pages by hand.. rather we ask the server to prepare..

2.Dynamic Content generation application(1996 to till date)

  After 1995, many people thought that how we can use web for biz information system

How to share biz information via internet?
   Generally biz data is stored in databases , how to embed database data into html pages.

 1.web server need to talk to database
 2.web server need to prepare html pages based on database records
 3.Those information must be transported to web clients.

Web server core design to get client request and send html response to the client.
Along with web server, something was introduced called "Programming language runtime"

Tech stacks:

1.CGI With C language and Perl script.
2.Java Servlets and JSP
3.Active Server pages - ASP
4.PHP

3.Web services-1998 to till date

	 Rise of ECommerce, using internet and web how to exchange data between two biz organizations.
 The existing html technology was not suitable to send and receive data because html is just   user interface document language.

 We need , data to be exchanged, that's where new data model was created called 'XML'
xml based web apps called web services.

SOAP protocol was created to transfer XML based documents "SOAP based webservices"

After 2005 SOAP based web services, started failing due to mobile computing.

New Web services  were designed called "Restful Web services"

Restful web services were used to build any type of data formats like json,xml,pdf,html etc...

4.Client side web apps called "Single Page Web Apps"(2007 to till date)

Single page web apps are built using JavaScript at client side where as server side web services(REST apis) are used.

SPA Tech stack:
HTML 5,CSS 3, JavaScript.

Frameworks build based on SPA
1.Angular js |Angular
2.react js
3.vue js
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								.				React as SPA lib
......................................................................................................................................................................................................................................
React.js was created by Facebook , in order to build SPA applications for browsers.

Advantages of SPA:

1.Pages are created  at client side, so server load is completely removed
2.SPA reduces the lot of physical pages after deployment.
3.Clear separations of concerns.

Drawbacks of SPA:
................................

1.SEO Challenges
     SPA applications dynamically load content via JavaScript, so search engine crawlers might not see all the page content.
    It impacts poor search ranking and visibility.
2.Inital Load Time
    The browser must download entire js bundle before showing content, but now a days this problem has been fixed using lazy loading feature
3.Security Risks:
     SPAs are Vulnerable to Cross Site Scripting attacks (XSS) 

Browser history issues, memory leaks and Performance degradation 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			To solve SEO Problems, new Technology was created called "SSR" - Server Side Rendering

		SSR is a technique where your web application's HTML is generated on the server instead of in the browser

Why SSR?
1.Better SEO
   Search engines get complete HTML , making it easier to index.
2.Faster first Paint
    The user sees the page sooner, especially on slow networks

..................................................................................................................................................................................................................................	 											Rendering Types
..................................................................................................................................................................................................................................
What is Rendering?
   Render means preparation, HTML Page preparation...

Rendering Types:
1.CSR- Client side Rendering.
   HTML Pages are prepared at client side - Pure SPA Applications
2.SSR  -Server Side rendering
   HTML Pages are prepared at server side - Dynamic Content Generation applications.


Based on these rendering type, we can classify other rendering

1.Universal rendering /Hybrid Rendering
  Server + Client side , combing both rendering 

2.Full SSR and Partial SSR
    Partial SSR is nothing but only "index.html" is compiled at server , rest of the application is rendered at client side.
    			
					Full SSR is nothing but "index.html" and other pages are compiled at server....

......................................................................................................................................................................................................................................
									      When Rendering can happen
							 		    (when html pages are prepared)
........................................................................................................................................................................................................................................
1.Request time
2.Build time

1.Request time :
 When user types url 

  http://www.example.com/products--------------->Server Receives Request----Prepares Page--send   that page to client.
 Technologies : jsp,asp,php

2.Build time
    Build is nothing but, preparing app for production.. before hosting we have to prepare the   app
  During build phase, we can prepare html pages/render html pages 

SSG -  Static Site Generations:
......................................................
	Building web sites/apps during build phase is called SSG.

Why SSG?
  Super fast page access

							Based On SSG , There is specification is available "JAM Stack"
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									ISR - Incremental Static Rendering
......................................................................................................................................................................................................................................

SSG - Build time or ahead of time
SSR - Request time

ISR = SSG + SSR - Build time + request time 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										What is Next.js?

Next js is a framework that helps to build web apps of all types
  
 you can build Full SSR apps..
 you can build SSR With Request time
 you can build SSG with Build time -  JAM Stacks
 you can build SSR with CSR  - Server + SPA - Hybrid rendering
 you can build rest API also - Web services
 You can build ISR apps - build time + request time

							 "You cant build pure SPA apps like react with redux"

Using Next you can build 
     Pure server side apps with database access, other external API access.....
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				              				 Next js UI layer - Next JS APP architecture
...........................................................................................................................................................................................................................................
Next js uses "react core features" to build UI layer...

React core features:
1.React component driven
2.React uses data mutation techniques like props and state
3.React uses event listeners for interactions
4.React hooks

Next.js tech stack:

1.React as ui layer
2.Next does not recommend to use "redux"
3.Next uses api layer- rest api development
4.Next can talk to any database via orm frameworks...
.......................................................................................................................................................................................................................................
									Next js framework and Runtime Architecture
.......................................................................................................................................................................................................................................

Next js uses "Rust based build system" where as react uses web pack build ....

What is Rust?
	 It is programming language, used to build Next.js apps. Next core engine is written in Rust only.

Next.js Compiler:
..........................
 Next js Compiler is written using RUST Using SWC (Speedy Web Compiler).
	https://swc.rs/docs/getting-started

		SWC allows next js to transform and minify the js code for production. This replaces babel.
					SWC is 20x faster than Babel, it is embedded inside next js

Turbo pack:
 	Turbopack is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js. 
 Turbopack can be used in Next.js in both the pages and app directories for faster local development

...........................................................................................................................................................................................................................................
										NEXT JS Getting Started
..........................................................................................................................................................................................................................................

How to install next js and how to create app?

System Req:

1.Node.js 18.18 or later
2.OS - any os
3.vs code.

Installing/Create next app:
..........................

There are two ways :

1.automatic way
   We recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. To create a project, run:
   npx create-next-app@latest

2.manual way
 Just create folder and app structure your self and install packages
 To manually create a new Next.js app, install the required packages:
 npm install next@latest react@latest react-dom@latest
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											Next application development pattern
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

There are two ways we can build next application

1.Using Page Router
	It is old way / traditional way of building next application , Next version before 13.
	It is not recommended way of building modern next application
2.Using App Router
    It is the latest way of building next application, after next version 12
    It is recommended way of building next application

Languages are used to build next application

1.Typescript
2.Javascript

Steps to create project:
.......................................
npx create-next-app@latest
√ What is your project named? ... hello-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
.................................................................................................................................................................................................................................................
								     Exploring Project Structure
............................................................................................................................................................................................................................................

package.json
{
  "name": "hello-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "next": "15.4.6"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4"
  }
}

next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

jsonconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
This is compiler configuration

Tailwind configuration - postcss.config.mjs
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

....................................

src/app

layout.js
page.js
global.css

public 
  Static assets
************************************************************************************************************************************************************
										How to run next app?

dev, build and prod

dev mode:
	>npm run dev

How to prepare your app for production?

First you have to build

   >npm run build

Then you have run in production mode
    >npm start
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					              				Next.js Application Architecture
.......................................................................................................................................................................................................................................
			               Next.js app is server side app, so for each web page ,the html page is created.
		        				  "Next App is conventional over Configuration based"

conventional over configuration is a software design principle that reduces the need for explicit configuration by following sensible defaults.

file names and folder names are standard based.


filenames are predefined...like page.js , layout.js

FileNames:
1.layout.js
2.page.js
3.template.js
4.route.js
5.error.js
6.not-found.js
7.global-error.js
8.loading.js
9.default.js
.......................................................................................................................................................................................................................................
										 React core features inside next js
........................................................................................................................................................................................................................................
1.Component:
	  In react every thing is component, in next also the component driven arch is followed.
2.Props
    In react data is passed to the component via props.
    Components are created in a configurable way..

Types of Props:

1.Data as prop:

function User(props){
   return <div>
		<h1>{props.id}</h1>
  <div>
}

   <User id={1} />

2.State as Prop -Dynamic Prop

  function User(){
    const [id,setId] = useState(1)
    return <UserDetails id={id} />
  }

3.function as Prop- Listeners as Prop

  function User(){
    const [id,setId] = useState(1)
    return <UserDetails setId={setId} />
  }

4.Component as Prop

Component as Prop syntax we use heavily in Next.js

Component Rendering:

function Tab(props){
   return <> {props.children} </>
}

<Tab/> - Self Closing
  This component has no children

<Tab>
    <Grid/> -  Component as Prop
<Tab>
..........................................................................................................................................................................................................................................
										 Every thing is component  in Next.js
.........................................................................................................................................................................................................................................

Page Component: - page.js
  It is place holder component which displays ui.

Layout Component: layout.js
 	 It is container component which holds Page Component

Parent and child:

Pattern 1:

function Page() {
    return <h1>Home Page</h1>
}
function Layout(){
	return <Page/>
}

Pattern 2:
function Page() {
    return <h1>Home Page</h1>
}
function Layout(props){
	return <div>{props.children}</div>
}

function App(){
 return <Layout>
	<Page/>
</Layout>
}

In Next js we use pattern 2,
You cant  supply your own entry function, Next, internally suppiles

Every next application begins /starts with root layout - src/app/layout.js

layout - parent
	  ------------------------------
          |                             |
                      Page -child |
          |                             |
          |                             |
          |                             |
           -----------------------------

<Layout>
    <Page/>
</Layout>

How to declare in built components (page,layout etc...) ?

 1.every component must be "functional component" - No Class Component.
 2.every in built component (page,layout...)  must be exported using "export default" only.
 3.Every Next application must have "root layout" src/app/layout.js
 4.Every Next application may have  "home/landing page" src/app/page.js
 5.Component Name can be any thing like HomePage,Home,MyHomePage,MyLayout etc..

page.js | page.jsx | page.tsx 
layout.js | layout.jsx | layout.tsx


How to create Page and layout Components ?

src/page.js

function Home() {
  //you must return jsx 
  return <div>
    <h1>Home Page</h1>
  </div>
}

export default Home;

src/app/layout.js
export default function RootLayout(props) {
    return <html lang="en">
        <body>
            {props.children}
        </body>
    </html>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Layouts and Pages-Routing
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

What is Routing?
	Routing is nothing but mapping resources against url.

Next.js uses "file-system based routing" , meaning you can use folders and files to define routes.

Types of Routing implementation:

1.page routing
    It is old form of routing pattern, now it is not used
   page routing was available before next.js version 12

2.app routing
    It is modern form of routing pattern, now it is heavily used
    app routing has been available from next.js version 13 onwards

create a page and map against url:
.........................................................

A page is UI that is rendered on a specific route. in order to create a page, "add page.js or page.jsx or page.tsx page.ts".

Route:
   means URL  ----> /products , /customers , /comments
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
√ What is your project named? ... core-routing
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

index route /Home route:
.........................................

src/app/page.js ->index route

 if you create page.js inside src/app folder which is called index route or home route.

........................................................................................................................................................................................................................................
										Nested Folders and Routing
.....................................................................................................................................................................................................................................

products page:

Folder structure
src/app/products/page.js
src/app/customers/page.js
src/app/contact/page.js

URL
/products

export default function ProductPage() {
    return <div>
        <h1>This is Product Page...Comming soon</h1>
    </div>
}

/customers
export default function CustomerPage(){
      return <div>
        <h1>Customer Page</h1>
      </div>
}
/contacts
export default function ContactPage() {
    return <div>
        <h1>Contact Page</h1>
    </div>
}
.......................................................................................................................................................................................................................................
										Deep Nesting

URL
/products/reviews/comments

src/app/products/reviews/comments/page.js
export default function Reviews(){
    return <h1>Reviews Page</h1>
}

URL
/products/reviews/page

src/app/products/reviews/page.js
export default function Reviews(){
    return <h1>Reviews Page</h1>
}

Hands on :

You create a route for course, training ,instructor
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									   Nested Layout
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Nested layout is optional only, if you want nested layout, which is shared among nested pages.

layout.js - File Convention for nested layout also.

<Layout> -- root layout
	<Layout> --nested layout
		<Page/>
	</Layout>
</Layout>

eg:
src/app/customer/layout.js

export default function CustomerLayout(props) {

    return <div id="customerlayout">
        {/* Customer Page is inserted here */}
        {props.children} 
    </div>

}

Deep Nested Layouts:

src/app/products/layout.js
export default function ProductLayout({ children }) {
    return <div id="productLayout">
        {children}
    </div>
}
src/app/products/reviews/layout.js
export default function ReviewsLayout({ children }) {
    return <div id="reviewsLayout">
        {children}
    </div>
}
src/app/products/reviews/comments/layout.js

export default function CommentsLayout({ children }) {
    return <div id="commentsLayout">
        {children}
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Component Driven Archiecture
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Layout is container Component, Page Component is mapped against route segment, which displays UI.

Can Page Hold other Components?

Yes
    Layout
          | 
       Page
            |
 UserProfile
     |
    UserList
      |
      UserItem

Project:
√ What is your project named? ... components-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Without extra Components:

src/app/todos/layout.js
export default function TodosLayout({children}){
    return <div id="todosLayout">
         {children}
    </div>
}
src/app/todos/page.js
import TODOS from "../mock-data/todos"
export default function TodosPage() {
    return <>
        <h1>Todos Page</h1>
        <ul>
            {TODOS.map(todo => {
                return <li key={todo.id}>
                    <span>{todo.title} {todo.status ? "Completed" : "In Progress"}</span>
                </li>
            })}
        </ul>
    </>
}

Here we have dumpted todos ui inside page.js , which is not recommended, you have to have separate component.

src/app/todos/components/TodoList.jsx
import TODOS from "../../mock-data/todos"

export function TodoList() {
    return <ul>
        {TODOS.map(todo => {
            return <li key={todo.id}>
                <span>{todo.title} {todo.status ? "Completed" : "In Progress"}</span>
            </li>
        })}
    </ul>
}
src/app/todos/page.js
import { TodoList } from "./components/todosList";

export default function TodosPage() {
    return <>
        <TodoList />
    </>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										import aliases
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Import aliases in Next.js , in javascript or typescript projects generally provide a way to create shorter,more readable and less error-prone import paths instead of using long relative paths

eg:
 ../../
../../../components/Mycomponent

import TODOS from "../../mock-data/todos"

Using Import aliases Syntax:

@/app/yourFolder/YoursubFolder/fileName

import TODOS from "@/app/mock-data/todos"


eg:

import TODOS from "@/app/mock-data/todos"
export function TodoList() {
    return <ul>
        {TODOS.map(todo => {
            return <li key={todo.id}>
                <span>{todo.title} {todo.status ? "Completed" : "In Progress"}</span>
            </li>
        })}
    </ul>
}

// import { TodoList } from "./components/todosList";
import { TodoList } from "@/app/todos/components/todosList"
export default function TodosPage() {
    return <>
        <TodoList />
    </>
}

Task:
Display Post Details using components
Mock data : https://jsonplaceholder.typicode.com/posts

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											 Components Types
											  (Rendering Types)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Rendering is nothing but page preparation (html creation).

How to create html and where to create Html?

Where:
     rendering can take place in the server or on the client.

When:
  At Server side:
    It can happen either ahead of time during build time.
    or on every Request at runtime.


With next js , two types of rendering methods are available.

1.Server-side rendering
   1.0. Request time
   1.1. Static site Generation - build time
   1.2. ISR - Incremental Static rendering - first Build time and later runtime.

2.Client-side Rendering
   Preparing portion of page at client side , which is similar to SPA Apps. -  It is just like JQuery with Php/Java/DotNet

Component types:
 Based on Rendering, we can classify the component into two category.

1.Server Component
   Server components are rendered at server side
2.Client components
   Clients components are rendered at client side

					By default all components are "Server Rendered Components"

   page,layouts,templates,notfound,loading,default all are server components only

Even When we create custom components

export default function Greet(props) {
     return <>
        <h1>{props.message}</h1>
     </>
}
...........................................................................................................................................................................................................................................
										 	Client Component
...........................................................................................................................................................................................................................................
Component which may have logic to interact with user like button clicks,typing,animations,data fetch at client side,hooks, any dom manipulation......

The components can be co-located..

	Client components allow us to write interactive UI that is prendered on the server and can use client javascript to run in the browser.

Advantages of client Rendering:

1.Interactivity
   Client components uses "state,effects,event listener" , meaning they can provide immediate feedback to the user and update the UI.

2.Browser APIs:
     Client components have access the browser apis like Storage,geo location....


src/app/counter/components/Counter.jsx
import { useState } from "react"

export function Counter() {
    const [value, setValue] = useState(0)

    return <>
        <h1>Value : {value}</h1>
    </>
}

src/app/counter/page.js
import { Counter } from "@/app/counter/compoents/Counter";

export default function CounterPage(){
    return <div>
        <h1>Counter</h1>
        <Counter/>
    </div>
}
After running:

./src/app/counter/compoents/Counter.jsx (1:10)

Ecmascript file had an error
> 1 | import { useState } from "react"
    |          ^^^^^^^^
  2 |
  3 | export function Counter() {
  4 |     const [value, setValue] = useState(0)

You're importing a component that needs `useState`. This React Hook only works in a Client Component. To fix, mark the file (or its parent) with the `"use client"` directive.

 Learn more: https://nextjs.org/docs/app/api-reference/directives/use-client

Import trace:
  ./src/app/counter/compoents/Counter.jsx
  ./src/app/counter/page.js


How to fix this?

Convert the component into client components, so that next will bundle this component and send to the browser, so browser starts hyderating this code.

How to tell to the next server?

//directive is nothing but instructions to the compiler

"use client" // directive

import { useState } from "react"

export function Counter() {
    const [value, setValue] = useState(0)

    return <>
        <h1>Value : {value}</h1>
        <button onClick={() => {
            setValue(value + 1)
            console.log(value)
        }}>+</button>
    </>
}

How to know the client component?

if component has 

1.useState hook or any hook
2.Any listener
3.useEffect hook
4.Browser apis
5.state declaration

Task:
  CURD operation using Array
'use client'
import { useState } from "react"

export default function Post() {
    //post list
    const [posts, setPosts] = useState([{
        id: 1, title: 'React', body: 'This is react post'
    }, {
        id: 2, title: 'Angular', body: 'This is Angular Post'
    }
    ])
    //Edit or Add status
    const [isEditing, setIsEditing] = useState(false)
    //collect form data 
    const [form, setForm] = useState({ title: '', body: '', id: null })

    //handleSubmit
    const handleSubmit = (evt) => {
        evt.preventDefault()
        isEditing ? updatePost() : addPost()
    }

    const updatePost = () => {
        console.log('update post is called')
        setPosts(posts.map(post => post.id === form.id ? form : post))
        setIsEditing(false)
        clearForm()
    }
    const addPost = () => {
        const newPost = { id: Date.now(), title: form.title, body: form.body }
        //add new Post into array
        setPosts([...posts, newPost])
        clearForm()
    }

    const clearForm = () => {
        setForm({ id: null, title: '', body: '' })
    }

    //edit 
    const handleEdit = post => {
        setIsEditing(true)
        setForm({ title: post.title, body: post.body, id: post.id })
    }
    //delete
    const handleDelete = id => {
        setPosts(posts.filter(post => post.id !== id))
    }

    return <div>
        {/* Add new Post */}
        {/* todo:Remove this after completing */}
        {JSON.stringify(form)}
        <form onSubmit={handleSubmit}>
            <div style={{ marginBottom: 10 }}>
                <input onChange={(e) => {
                    setForm({ ...form, title: e.target.value })
                }} type="text" value={form.title} placeholder="title" />
            </div>
            <div style={{ marginBottom: 10 }}>
                <textarea onChange={(e) => {
                    setForm({ ...form, body: e.target.value })
                }} type="text" value={form.body} placeholder="body" />
            </div>
            <div>
                <button>{isEditing ? "Update " : "Add "}Post</button>
            </div>
        </form>

        {/* List of Posts */}
        <ul>
            {
                posts.map(post => {
                    return <li key={post.id}>
                        <h1>{post.title}</h1>
                        <p>{post.body}</p>
                        <button onClick={() => {
                            handleEdit(post)
                        }}>Edit</button>
                        <button onClick={() => {
                            handleDelete(post.id)
                        }}>Delete</button>
                    </li>
                })
            }
        </ul>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\										Patterns for client and server components
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

1.Server component uses another Server Component
   inside layout.js we use page.js
   inside page.js we use UserList.js

2.Server component uses client component

3.Client component uses another server component

4.Client component uses another client component

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								2.Server component uses client component
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Server:

src/app/reviews/page.js
import { Like } from './components/like'

export default function ReviewPage() {
    return <div>
        <h1>Review Page</h1>
        <Like />
    </div>
}

Client:
src/app/reviews/components/likes.jsx

'use client'
import { useState } from "react"
export const Like = props => {
    const [value, setValue] = useState(0)

    const onLike = () => {
        setValue(value + 1)
    }
    return <>
        <h1>Like {value}</h1>
        <button onClick={onLike}>Like</button>
    </>
}

Note:
 if server uses client, the client component must be marked with "use client" directive

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
							Client component uses another server component
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


src/app/clientserverpattern/components/server.jsx

export default function Server(){
    return <div>
        <h1>Server Component</h1>
    </div>
}

src/app/clientserverpattern/components/client.jsx

'use client'

import Server from "@/app/clientserverpattern/components/server"

export default function Client() {
    return <div>
        <h1>Client Component</h1>
        <Server />
    </div>
}

			 if client uses another server component,"server component automatically becomes client component"

						 	When we use this pattern we loose server rendering

In the above code Server component runs in the client only.


		What if "client uses server component" but at the same time, i dont want to loose server rendering feature?

Solution:
     Pass Server Component as Prop to Child  component.


src/app/clientserverpattern/components/server.jsx

export default function Server(){
    return <div>
        <h1>Server Component</h1>
    </div>
}


src/app/clientserverpattern/components/client.jsx
'use client'

// import Server from "@/app/clientserverpattern/components/server"

export default function Client(props) {
    return <div>
        <h1>Client Component</h1>
        {/* <Server /> */}
        {props.children}
    </div>
}

src/app/clientserverpattern/page.jsx

import Client from "@/app/clientserverpattern/components/client";
import Server from "@/app/clientserverpattern/components/server"

export default function Page() {

    return <>
        {/* <Client /> */}
        <Client>
            {/* Pass server component as prop to Client */}
            <Server />
        </Client>
    </>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Client Compoent uses another client Component
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

src/app/clientusesclientpattern/page.js
import Counter from '@/app/clientusesclientpattern/components/Counter'

export default function ClientUsesClient(){
    return <>
        <Counter/>
    </>
}
src/app/clientusesclientpattern/components/Increment.jsx
'use client'

import { useState } from "react"

export default function Increment() {
    const [value, setValue] = useState(0)
    return <>
        <h1>Increment</h1>
        <h2>Value : {value}</h2>
        <button onClick={() => {
            setValue(value + 1)
        }}>+</button>
    </>
}
src/app/clientusesclientpattern/components/Counter.jsx

'use client'
import Increment from "@/app/clientusesclientpattern/components/Increment"

export default function Counter(){

    return <>
        <Increment/>
    </>
}


Note :

		If client component uses another client component, that another client component no need to use 'use client' directive.

					This would be very useful when we use thrid party ui components into next js

How to use react carbon lib

Steps:

1.npm install @carbon/react

src/app/carbon/page.jsx
import MyButton from "@/app/carbon/components/MyButton";

export default function CarbonPage() {
    return <>
        <MyButton />
    </>
}

src/app/carbon/components/MyButton.jsx
'use client'
import { Button } from "@carbon/react";

export default function MyButton(){
    return <>
        <Button>Click</Button>
    </>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									       Linking and Navigation
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

In order to understand how navigation works in Next.js we need to know the common concepts

1.Server Rendering
2.Prefeching 
3.Streaming
4.Client-side Transitions

1.Server Rendering
 
Layouts and Pages are React Server Components by default, on Initial and subsequent navigations, the "Server Component Payload" (RSC) Payload is generated on the server before being sent to the client.

java---compile----java bytecode---executed - native code
c#---compile----- clr code---executed native
c/c++ --compile----object code---executed native
js---compile---byte code--executed native code 

next.js code--compile---RSC Payload (server component code ,client component code)  ---rendered as html
RSC payload is compact binary representation of next.js code

Server Component Payload:
   It is internal json like structure, it is compiled image from jsx/js/tsx file.

 Source code---->Next.js Compiler---->React Server Component Payload (RSC P)------>Sent to the Client(browser)----->Browser downloads the RSC Payload ,Construct DOM tree.

There are two types of Rendering, based on "When" it happens

1.Static Rendering (or Prerendering) happens at build time or during revalidation and the result is cached (ISR)

2.Dynamic Rendering  happens at "request time" in response to a client request.

Draw backs of Server Rendering:
.....................................................
	The trade-off server rendering is that the client must wait for the server to response before the new route can be shown.
							But Next.js has taken step to improve or avoid this drawback

					  	By Introducing  features called "prefetching"  and "Client side transitions"



Prefetching:
.....................
			Prefetching is the process of loading a route in the background before the user navigates to it
This makes navigation between routes in your application feel instant, because by the time a user clicks on a link, the data render the route is already available in the client side.

How much of the route is prefecthed depends on whether it's static or dyanmic

1.static route : the full route is prefetched.
2.dynamic route: prefetching is skipped, or the route is partially prefetched if "loading.jsx" is present

Why dynamic route is skipping  prefetching?		

		By Skipping or Partially prefetching dynamic routes, Next tries to avoid unnecessary work on the server for routes the users may never visits.
		How ever , waiting for a server response before navigation can give the users the impression that the app  is not responding

How to inform the user that app is loading? 

	You have to show that the app is still active -  You can show some progress bar.

Streaming:

		Straming allows the server to send "parts of a dyamic route" to the client as soon as they are ready, rather than waiting for 
		the entire route to be rendered.This means users see something sooner, even if parts of the page are still loading.

 For dynamic routes, it means they can be partially prefeched , that is shared layouts and loading spinners can be requested ahead of time.

Client Side transitions:
	
		Traditinally, navigation to a server-rendered page triggers a full page load. This clears state,resets scroll postion, and blocks 		interactivity.

Next.js avoids this with client-side transitions using the <Link> Component , instead of reloading the entire page, it updates the content dynamically by

	1.Keeping any shared layouts and UI
	2.Replacing the current page with prefeched loading state or new page if available.

	Client side transitions are what makes a server-rendered apps feel like client rendered pages, along with prefetching and streaming
	it enables fast transitions, even for dyamic routes.

What can make transitions slow?

1.Dynamic routes without loading.js or React.Suspense

2.Dynamic segements  without generateStaticParams

3.Slow networks

4.Disable prefeching 

5.Hydration not completed

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											Navigation Implementation
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

There are four ways to navigate between routes in Next.js

- Using the <Link> Component (Client Component)
- Using useRouter hook (Client Component)
- Using the native browser History API (Client)
- Using redirect function (Server component)

Navigation can happen  in two places

1.Server side redirection/navigation
   Redirection is controlled by Server

2.Client Side Redirection/Navigation
   Redirction is controlled by browser

Server Redirection:
1.redirect function
2.permantRedirect function
3.routeConfig file
4.API redirections - NextReponse.redirect

Client Side Naviation:
1.Link component
2.useRouter Hook
3.Browser Native History API.

Project:
√ What is your project named? ... linking-navigation
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Link Component:

 Link is react component that extends the HTML <a> element to provide client side navigation between routes.

 Link component has lot of properties
 1.href
 2.replace
 3.scroll
 4.prefech

Basic Navigation

src/app/layout.js
import Link from "next/link";


export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <header>
          <h1>Header</h1>
          <nav>
            <ul>
              <li>
                <Link href={{ pathname: "/about" }}>About</Link>
              </li>
              <li>
                <Link href={{ pathname: "/services" }}>Services</Link>
              </li>
            </ul>
          </nav>
        </header>
        {/* Body : page */}
        {children}
        <footer>
          <p>This is footer</p>
        </footer>
      </body>
    </html>
  );
}

src/app/about/layout.js
export default function AboutLayout(props) {
    return <div id="aboutLayout">
        {props.children}
    </div>
}
src/app/about/page.js
export default function About(){
    return <div>
        <h1>About</h1>
    </div>
}


src/app/services/layout.js
export default function ServicesLayout(props) {
    return <div id="servicesLayout">
        {props.children}
    </div>
}

src/app/services/page.js

export default function Services(){
    return <div>
        <h1>Services</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									   Create Nav Bar Component
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

src/app/components/NavBar.jsx
import Link from "next/link"

export default function NavBar() {
    return <nav>
        <ul>
            <li>
                <Link href={{ pathname: "/about" }}>About</Link>
            </li>
            <li>
                <Link href={{ pathname: "/services" }}>Services</Link>
            </li>
        </ul>
    </nav>
}
src/app/layout.js
import NavBar from "@/app/components/NavBar";

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <header>
          <h1>Header</h1>
           <NavBar/>
        </header>
        {/* Body : page */}
        {children}
        <footer>
          <p>This is footer</p>
        </footer>
      </body>
    </html>
  );
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											Active Links
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

If you want to highlight which menu we have clicked, we can  show the menu highlighted

How to enable active link feature?

you can use hook "usePathname()" to determine if link is active or not.

For example to add a css class to the active link, you can check the current pathname matches  of the link.

src/app/links.css
.active {
    background-color: aqua;
}

src/app/components/NavBar.jsx
'use client'
import Link from "next/link"
import { usePathname } from "next/navigation"
import '../link.css'

export default function NavBar() {
    const pathname = usePathname()
    // console.log(pathname)
    return <nav>
        <ul>
            <li>
                <Link className={`${pathname === '/about' ? 'active' : ''}`} href={{ pathname: '/about' }}>About</Link>
            </li>
            <li>
                <Link className={`${pathname === '/services' ? 'active' : ''}`} href={{ pathname: '/services' }}>Services</Link>
            </li>
        </ul>
    </nav>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										useRouter Hook
................................................................................................................................................................................................................................................
useRouter hook allows you programmetically change route from client components.

src/app/dashboard/components/DashboardNavigator.jsx
'use client'

import { useRouter } from "next/navigation"

export function DashBoardNavigator() {
    const router = useRouter()
    return <div>
        <button onClick={() => {
            router.push('/services')
        }}>Services</button>
        <button onClick={() => {
            router.push('/about')
        }}>About</button>
    </div>
}

src/app/components/NavBar.jsx
'use client'
import Link from "next/link"
import { usePathname } from "next/navigation"
import '../link.css'

export default function NavBar() {
    const pathname = usePathname()
    // console.log(pathname)
    return <nav>
        <ul>
            <li>
                <Link className={`${pathname === '/about' ? 'active' : ''}`} href={{ pathname: '/about' }}>About</Link>
            </li>
            <li>
                <Link className={`${pathname === '/services' ? 'active' : ''}`} href={{ pathname: '/services' }}>Services</Link>
            </li>

              <li>
                <Link className={`${pathname === '/dashboard' ? 'active' : ''}`} href={{ pathname: '/dashboard' }}>DashBoard</Link>
            </li>
        </ul>
    </nav>
}

src/app/dashboard/page.js
import { DashBoardNavigator } from "@/app/components/DashboardNavigator";

export default function Dashboard() {
    return <DashBoardNavigator />
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Advanced Routes - Dynamic Routes -Dynamic Route Segement

What is Dynamic Route?
	   When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time.

URL pattern:
/users/1
/posts/comments/1
	
How to create dynamic route?

Convention:
    A dynamic segment can be created by wrapping a folder's name in square brackets.
  [folderName]
   eg:
     [id] or [city] or [slug]


 What is your project named? ... dynamic-routes
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Building Master Details Pages
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Ways to build:
1.Using mock data
2.Using api call

Using Mock data:

src/app/todos/page.js
import TODOS from "@/app/mock-data/todos";
import Link from "next/link";

export function fetchTodos() {
    return TODOS
}

export default function TodoPage() {
    const todos = fetchTodos()

    return <>
        <ul>
            {todos.map(todo => {
                return <li key={todo.id}>
                    <Link href={{ pathname: `/todos/${todo.id}` }}>
                        <span>{todo.title}</span>
                    </Link>
                </li>
            })}
        </ul>
    </>
}

src/app/todos/[id]/page.js
export default function TodosDetailsPage() {
    return <div>
        <h1>Details Page</h1>
    </div>
}

Here if you want to read the parameter of todoId, Next.js will supply id value as params via props


export default function TodosDetailsPage(props) {
    console.log(props.params)
    return <div>
        <h1>Details Page</h1>
    </div>
}
Promise {
  <pending>,
  id: '8',
}
Here you can see that props.params returns Promise, if you want to read id value, you have to use then or you have to use async...await

export default function TodosDetailsPage(props) {
    console.log(props.params.id)
    return <div>
        <h1>Details Page</h1>
    </div>
}

Error: Route "/todos/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at TodosDetailsPage (src\app\todos\[id]\page.js:2:29)
  1 | export default function TodosDetailsPage(props) {
> 2 |     console.log(props.params.id)
    |                             ^
  3 |     return <div>
  4 |         <h1>Details Page</h1>
  5 |     </div>

how to read id?

import TODOS from "@/app/mock-data/todos";
import Link from "next/link";

export function fetchTodoById(id) {
    return TODOS.find(todo => todo.id === id)
}
export default async function TodosDetailsPage(props) {
    //console.log(props.params.id)
    const id = (await props.params).id
    const todo = fetchTodoById(+id)
    return <div>
        <h1>{todo.id}</h1>
        <h2>{todo.title}</h2>
        <h2>{todo.completed ? "Completed" : "InProgress"}</h2>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Master details page - Using API Calls
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Master Page:

src/app/posts/page.js
import Link from "next/link"

export async function fetchPosts() {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts')
    return response.json()
}

export default async function PostsPage() {
    const posts = await fetchPosts()
    return <div>
        <ul>
            {posts.map(post=>{
                return <li key={post.id}>
                    <Link href={{pathname:`/posts/${post.id}`}}>
                        <span>{post.title}</span>
                    </Link>
                </li>
            })}
        </ul>
    </div>
}

src/app/posts/[id]/page.js
export async function fetchPostById(id) {
    const url = `https://jsonplaceholder.typicode.com/posts/${id}`
    const response = await fetch(url)
    return response.json()
}

export default async function PostDetailsPage(props) {
    const id = (await props.params).id
    const post = await fetchPostById(+id)
    return <div>
        <section>
            <h1>id:{post.id} userId: {post.userId}</h1>
            <p>{post.title}</p>
            <p>{post.body}</p>
        </section>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Styling-CSS,Fonts,Images
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

CSS:
1.Global CSS
2.CSS Modules
3.CSS Framworks
  ->Tailwind framwork
  ->bootstrap
  ->SASS
4.CSS in js

In React How to apply css:

<div className="flex">

const styles= {
    backgroundColor:'red'
}
<div style={styles}>
<div style={{backgroundColor:'red'}>
In React How to apply css:

<div className="flex">

const styles= {
    backgroundColor:'red'
}
<div style={styles}>
<div style={{backgroundColor:'red'}>

√ What is your project named? ... styling-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								  How to use Tailwind framework


export default function Home() {
  return <div className="m-20">
    <p className="text-xs">This is tailwind</p>
    <p className="text-sm">This is tailwind</p>
    <p className="text-base">This is tailwind</p>
    <p className="text-lg">This is tailwind</p>
    <p className="text-xl">This is tailwind</p>
    <p className="text-3xl">This is tailwind</p>
    <p className="text-3xl font-black">This is tailwind</p>
    <p className="text-3xl font-black text-blue-900 ">This is tailwind</p>
    <p className="text-3xl font-black text-blue-900 bg-red-100 ">This is tailwind</p>
    <p className="text-3xl font-black text-blue-900 bg-red-100 ">This is tailwind</p>
    <p className="text-3xl font-black text-blue-900 bg-red-100 ml-10 mt-10 mr-10 rounded-full p-10 ">This is tailwind</p>

  </div>
}
...........................................................................................................................................................................................................................................
										CSS Modules
...........................................................................................................................................................................................................................................
Why CSS Modules?

Local Scope Prevents Clashes: CSS Modules use local scope to avoid style conflicts across different project parts, allowing component-scoped styling.
Clear Style Dependencies: Importing styles into their respective components clarifies which styles impact which areas, enhancing code readability and maintenance.
Solves Global Scope Problems: CSS Modules prevent the common issue of styles in one file affecting the entire project by localizing styles to specific components.
Boosts Reusability and Modularity: CSS Modules allow the same class names in different modules, promoting modular, reusable styling.

Module Syntax:
YourName.module.css

src/app/profile/profile.module.css

.profile {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    background-color: #ffffff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.profileImage {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 16px;
    object-fit: cover;
}

.name {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 8px;

}

.bio {
    font-size: 1rem;
    color: #4a5566;
    line-height: 1.5;

}

src/app/profile/page.js
import styles from '@/app/profile/profile.module.css'

export default function ProfilePage() {
    const profile = {
        name: 'Subramanian Murugan',
        bio: 'Next.js Trainer | Micro services Consultant | Open Source Contributor'
    }
    return <div className={styles.profile}>
        <h1 className={styles.name}>{profile.name}</h1>
        <p className={styles.bio}>{profile.bio}</p>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									css in js using style attribute
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

import styles from '@/app/profile/profile.module.css'

export default function ProfilePage() {
    const profile = {
        name: 'Subramanian Murugan',
        bio: 'Next.js Trainer | Micro services Consultant | Open Source Contributor'
    }
    return <div className={styles.profile}>
        <h1 style={{ backgroundColor: 'yellowgreen' }} className={styles.name}>{profile.name}</h1>
        <p className={styles.bio}>{profile.bio}</p>
    </div>
}
............................................................................................................................................................................................
								External Stylesheets
..........................................................................................................................................................................................

Steps:
1.install bootstrap
   npm i -D bootstrap
2.import in the root layout

src/app/layout.js

import 'bootstrap/dist/css/bootstrap.css'

.........................................................................................................................................................................................................................................
			      					Image Handling
...........................................................................................................................................................................................................................................

Next.js comes with automatic image optimization for better performance and user experiences.

How to handle static assets?

You can store all static assets such as images,fonts,docments under public folder in the root directory

if you are going to access any static assets inside code , you can use "/".

Image: 
 Next.js provides Image component which extends HTML <img> element.

How to use Image component?

 next/image package 

<Image src="" alt="">

src property can point local image or remote image.

How to use local image?

import Image from "next/image"
export default function ImagePage() {

    return <div>
        <Image src="/next.svg" alt="This is Next logo" height={100} width={100} />
        <Image src="/window.svg" alt="This is Next logo" height={100} width={100} />

    </div>
}

How to handle Remote Images?

import Image from "next/image"

export async function fetchProducts() {
    const url = 'https://fakestoreapi.com/products'
    const response = await fetch(url)
    return response.json()
}

export default async function ProductsPage() {
    const products = await fetchProducts()
    return <div className="m-10 p-5">
        {
            products.map(product => {
                return <section key={product.id}>
                    <h2>{product.id}</h2>
                    <h3>{product.title}</h3>
                    <Image src={product.image} height={200} alt={product.title} width={200} />
                </section>
            })
        }
    </div>
}
After adding, you will get compile time error

Invalid src prop (https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_t.png) on `next/image`, hostname "fakestoreapi.com" is not configured under images in your `next.config.js`
See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host

src\app\products\page.js (17:21) @ <anonymous>


  15 |                     <h2>{product.id}</h2>
  16 |                     <h3>{product.title}</h3>
> 17 |                     <Image src={product.image} height={200} alt={product.title} width={200} />
     |                     ^
  18 |                 </section>
  19 |             })
  20 |         }

if you are accessing remote images, you must configure the location in next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
        remotePatterns: [new URL('https://fakestoreapi.com/img/**')],
    }
};

export default nextConfig;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
												Fonts
...........................................................................................................................................................................................................................................

By default Next js supports google fonts.

import { Inter } from "next/font/google";
import "./globals.css";

//inter font configuration
const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}
Task:
 You have to build master details page

 Master page must have card layout.

 Detail page must have full information with layouts.

Data Url:
https://fakestoreapi.com/products

1.Using css with proper layouts.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
						   					Data Fetching
...........................................................................................................................................................................................................................................

Where data fetching can happen?

Types of Data fetching:

1.Server side data fetching
2.Client side data fetching.

Server side data fetching:
..........................................
=>Whenever possible , we recommend fetching data on the server,This allows you to
 Have direct access to back end data resources(eg.databases)

=>Keep your application more secure by preventing sensitive information, such as access tokens and API Keys, from being exposed to the client.

=>Perform multiple data fetches with single round-trip instead of multiple individual requests on the client.

=>Reduce client-server waterfalls.

=>Depending on your region, data fetching can also happen closer to your data source, reducing latency and improving performance.
....................................................................................................................................................................................................................................
                                               			   Fetching Data Where It's Needed
....................................................................................................................................................................................................................................

	If you need to use the same data (e.g. current user) in multiple components in a tree, you do not have to fetch data globally, nor forward props between components.
	 Instead, you can use fetch or React cache in the component that needs the data without worrying about the performance implications of making multiple requests for the same data.

Parent - Layout  - apicall url eg fetch('/api/customers')
   |
   child  - Layout -apicall sameurl -fetch('/api/customers')
     |
     child -Layout -apicall sameurl -fetch('/api/customers')
       |
      child -Layout -apicall sameurl -fetch('/api/customers')
        |
        child- Page -apicall sameurl -fetch('/api/customers')

........................................................................................................................................................................................................................................
				  						Server side data fetching using "fetch" api
........................................................................................................................................................................................................................................

Fetching data on the server with fetch:
...............................................................

	Next.js extends the native "fetch" Web API to allow you to configure the caching and revalidating behavior for each fetch request on the server.

React extends fetch to automatically memoize fetch requests while rendering a React component tree.

There are four places You can use "fetch":

1.Server components
2.Client Components
3.Route Handlers,REST API
4.Server Actions


You can use fetch with async/await in "Server Components", in "Route Handlers", and in "Server Actions".

√ What is your project named? ... data-fetching
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

.........................................................................................................................................................................................................................................
	    						Data Fetching from external API using "fetch" api
.........................................................................................................................................................................................................................................

Server component:

src/app/todos/page.js

//data fetching in server component using fetch 
export async function fetchTodos() {
    try {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        const response = await fetch(url)
        return response.json()
    }
    catch (err) {
        return err
    }

}

export default async function TodosPage() {
    const todos = await fetchTodos()
    return <>
        <h1>Todos Page</h1>
        <ul>
            {todos.map(todo => <li key={todo.id}>{todo.title}</li>)}
        </ul>
    </>
}
...........................................................................................................................................................................................................................................
							  Server side data fetching using  "third party" api-axios
.........................................................................................................................................................................................................................................
	You can use any third party ajax api to call apis from next application but which is not recommended, because other apis will not have features such as caching,revalidation,request memoziation, we have to write extra code.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			  	 			Data fetching in Client components-Using fetch api
.......................................................................................................................................................................................................................................


Note: 
    fetching in client component mostly not recommended but still we can..

src/app/posts/components/FetchPost.jsx

'use client'

import { useEffect, useState } from "react"

export default function FetchPost() {
    const [posts, setPosts] = useState([])
    useEffect(() => {
        async function fetchPostDetails() {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const response = await fetch(url)
            const posts = await response.json()
            console.log('client')
            setPosts((myposts) => {
                return posts.concat(myposts)
            })
        }

        fetchPostDetails();


    }, [])

    return <>
        <h1>Posts</h1>
        <ul>
            {
                posts.map(post => {
                    return <li>
                        <span>{post.title}</span>
                    </li>
                })
            }
        </ul>
    </>
}

src/app/posts/page.js
import FetchPost from "./components/FetchPost"

export default function PostPage(){
    return <>
      <FetchPost/>
    </>
}

	Using "fetch" api  in client component is not recommended, the reason is which has no any caching feature is enabled, so fetch must be used only in server components/server side.

					What if i want to write client side data fetching with performance?

 Dont use 'fetch' api

				We have third party lib which internally wraps fetch only with caching features

...........................................................................................................................................................................................................................................
		      		 			Data Fetching in Client Components using SWR API
...........................................................................................................................................................................................................................................

What is SWR?

	 The name “SWR” is derived from "stale-while-revalidate", a HTTP cache invalidation strategy popularized by HTTP RFC 5861. SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.

SWR is wrapper for fetch api only.

Why SWR
1.Client side caching by default
2.Cache revalidation by default
3.You dont need to write hooks like useEffect,useState,
4.You get data,error,loading flags

npm i swr

rc/app/components/PostsClientUsingSWR.jsx

'use client'
import useSWR from "swr"

function fetchposts(...args) {
    return fetch(...args).then(res => res.json())
}

export default function FetchPostsUsingSWR() {
    const url = 'https://jsonplaceholder.typicode.com/posts'
    const { data, error, isLoading } = useSWR(url, fetchposts)

    if (error) {
        return <div>
            <h1>Failed to Return</h1>
        </div>
    }
    if (isLoading) {
        return <h1 className="text-center mt-30">Loading...</h1>
    }
    return <ul className="m-10">
        {
            data.map(post => {
                return <li key={post.id}>
                    {post.title}
                </li>
            })
        }
    </ul>


}	
src/app/posts/page.js
import FetchPost from "@/app/components/FetchPosts";
import FetchPostsUsingSWR from "@/app/components/PostsClientUsingSWR"

export default function PostPage(){
    return <div>
        <h1>Post Page Fetching Data from the Client Side</h1>
        {/* <FetchPost/> */}
        <FetchPostsUsingSWR/>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										 Building REST APIs in Next.js  
...........................................................................................................................................................................................................................................

REST api can be used to write rest api which may talk to databases or external rest api or Graphql api or microservices

Route Handler:
  Route handlers are used to create api in next

File Name:
 route.js


src/app/todos/
   page.js
   layout.js
   route.js - it is not recommended to write like this

Recommended Folder Structure:
.....................................................
src/app/api/todos
    route.js
    	[id]/
    	  route.js

url pattern
 /api/todos 
 /api/posts
 /api/products
 /api/products/1

Syntax:

export async function HTTPVerb(request){

}
=>Always route function must have "export" only.
=>Function must have async keyword
=>Function args may have request object.

Supported Verbs:

1.GET
2.POST
3.PUT
4.PATCH
5.DELETE
6.HEAD
7.OPTIONS

API Arg:
 NextRequest Object used to handle incoming client request
 NextResponse Object used to send response to the client.

Return Type always be json:
  function name must be marked as "GET/POST"

√ What is your project named? ... rest-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
Use case:Simple Rest api

src/app/api/greeter/route.js
import { NextResponse } from "next/server";

export async function GET(req) {
    //resonse
    return NextResponse.json({ message: 'Welcome to Rest api' })
}

Testing:
http://localhost:3000/api/greeter.

Patterns:

1.With Mock data
2.With External REST API
3.With Database

With Mock data:
GET,POST,GETById

src/app/api/users/route.js
import USERS from "@/app/mock-data/users";
import { NextResponse } from "next/server";

export async function GET(req) {
    return NextResponse.json(USERS)
}

export async function POST(req) {
    const body = await req.json()
    const newUser = {
        id: USERS.length + 1,
        ...body
    }
    USERS.push(newUser)
    return NextResponse.json(newUser, { status: 201 })
}

src/app/api/users/[id]/route.js
import USERS from "@/app/mock-data/users";
import { NextResponse } from "next/server";

export async function GET(req, { params }) {
    const id = (await params).id
    const user = USERS.find(tmpUser => tmpUser.id === +id)
    if (!user) {
        return NextResponse.json({ error: 'User Not found' }, { status: 404 })
    }

    return NextResponse.json(user)
}

export async function PUT(req, { params }) {
    const id = (await params).id
    const body = await req.json()
    const userIndex = USERS.findIndex(tmpUser => tmpUser.id === +id)
    if (userIndex === -1) {
        return NextResponse.json({ error: 'User Not found' }, { status: 404 })
    }
    USERS[userIndex] = { ...USERS[userIndex], ...body }
    return NextResponse.json(USERS[userIndex])
}

export async function DELETE(req, { params }) {
    const id = (await params).id
    let index = USERS.findIndex(tmpUser => tmpUser.id === id)
    USERS.splice(index)
    return NextResponse.json({ message: 'User has been deleted' })
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									CURD operation with External API
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

src/app/api/comments/route.js
import { NextResponse } from "next/server"

const url = `https://jsonplaceholder.typicode.com/comments`

export async function GET(req) {
    try {
        const response = await fetch(url)
        const comments = await response.json()
        return NextResponse.json(comments)
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: 404 })
    }
}

export async function POST(req) {
    const comment = await req.json()
    //send paylod to json placehodler
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(comment)
    })
    const newComment = await response.json()
    return NextResponse.json(newComment, {
        status: 201, headers: {
            'Content-Type': 'application/json', 'url': '/api/create'
        }

    })
}
src/app/api/comments/[id]/route.js
import { NextResponse } from "next/server"

const url = 'https://jsonplaceholder.typicode.com/comments'

export async function GET(req, { params }) {
    try {
        const id = (await params).id
        const response = await fetch(`${url}/${+id}`)
        const comment = await response.json()
        if (comment.id) {
            return NextResponse.json(comment)
        }
        return NextResponse.json({ message: `Comment for ${id} not found` }, { status: 404 })
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: 500 })
    }
}

export async function PUT(req, { params }) {
    try {
        const id = (await params).id
        const { name, email, body } = await req.json()

        if (name || email || body) {
            const response = await fetch(`${url}/${+id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name, email, body })
            })
            console.log('response', response)
            if (response.status === 500) {
                return NextResponse.json({ message: `comment not found` }, { status: 404 })
            }
            const updatedComment = await response.json()
            return NextResponse.json(updatedComment)
        }
        return NextResponse.json({ message: `Payload not supplied` }, { status: 404 })

    }
    catch (err) {
        console.log(err)
        return NextResponse.json({ err: err }, { status: 500 })
    }
}

export async function DELETE(req, { params }) {
    try {
        const id = (await params).id
        const response = await fetch(`${url}/${id}`, {
            method: 'DELETE'
        })
        const comment = await response.json()
        console.log(comment)
        return NextResponse.json({ comment: 'The comment has been deleted' })

    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: 500 })
    }
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&									 						How to integrate with UI
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

export async function fetchComments() {
    const response = await fetch('http://localhost:3000/api/comments')
    const comments = await response.json()
    return comments
}

export default async function CommentsPage() {
    const comments = await fetchComments()
    return <div className="ml-10 mt-10">
        {
            comments.map(comment => {
                return <section key={comment.id}>
                    <h1>CommentId : {comment.id} Post Id:{comment.postId}</h1>
                    <h3>{comment.name}</h3>
                    <h2>{comment.email}</h2>
                    <p>{comment.body}</p>
                                    <hr/>

                </section>
            })
        }
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Enviroment Variables
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Next.js Comes with built in support for enviroment variables, which allows you to isloate configuration from the code.

Loading environment variables:

process.env.VARIABLEName

File names:

.env
.env.local
.env.development
.env.production

1 .env - default for all enviroments 
	->base config  for all environment
2 .env.local - overrides all (recommended for secrets,machine-specific values, ignored by git)
	- overrides everthing, highest priority 
3.env.development - only for development 
        -loaded only in development (next dev)
        -good for development purpose
4.env.production
	-Loading only in production environment - next build && next start

if you define a variable in ".env,.env.development,.env.local" , which will be taken?
  from the env.local

√ What is your project named? ... environment-variables
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

eg:

create .env file in the project dir

project-Name
	|
	.env


.env:
MESSAGE=From ENV environment

Test in dev enviroment
npm run dev

Test in production environment

npm run build and npm start

You can see the same result.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Rules:
.env value can be overriden by .env.local and .env.development.
.env.local overrides all variables defined in all all enviroments that is .env.local takes highest priority among all.

eg:
.env
MESSAGE=From ENV environment
GREET=Welcome env

.env.local
MYVARLOCAL=This is from Env Local
GREET=Welcome Local

.env.development
MYVAR=I AM FROM Development
GREET=Welcome Development

.env.production
MYVARPROD=I am from production
GREET=Welcome Production

src/app/page.js
export default function Home() {

  return <div className="m-50">
    <h1>Environment Variables</h1>
    <h1>.Env File : {process.env.MESSAGE}</h1>
    <h2>.env.development : {process.env.MYVAR}</h2>
    <h2>.env.production : {process.env.MYVARPROD}</h2>
    <h2>.env.local : {process.env.MYVARLOCAL}</h2>
    <h2>Greet Variable In All ENV : {process.env.GREET}</h2>

  </div>
}

Task:
URL configuration for Rest API
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Client Components and env variables

.env.local
SEED_VALUE=10

src/app/counter/components/Counter.jsx
'use client'

import { useState } from "react"

export default function Counter() {
    const [value, setVavlue] = useState(process.env.SEED_VALUE)
    return <div className="m-20">
        <h1>Value : {value}</h1>
        <button onClick={() => {
            setVavlue(value + 1)
        }}>+</button>
    </div>
}

after running you get error, because process is node variable which is not supported in client side (client component)
						what if i want to read env variables in side client component?

yes we can read by using the below syntax
NEXT_PUBLIC_VARIABLE_NAME

eg:
.env.local
NEXT_PUBLIC_SEED_VALUE=20


src/app/counter/components/Counter.jsx
'use client'

import { useState } from "react"

export default function Counter() {
    const [value, setVavlue] = useState(+process.env.NEXT_PUBLIC_SEED_VALUE)
    return <div className="m-20">
        <h1>Value : {value}</h1>
        <button onClick={() => {
            setVavlue(value + 1)
        }}>+</button>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Database Integration
...........................................................................................................................................................................................................................................

Next js can integrate with any data base including sql (mysql,oracle,postgresql) and no sql (mongo,neodb,redis)

In order to talk to databases, application uses database drivers and apis....

Mostly we use use database frameworks called "ORM- Object Relational Mapping" Framework..

For Node js, We have many frameworks...

1.Prisma
2.Sequelize
3.Type ORM
etc...

In order to work database, we need few things

1.database  - mysql or mssql, or mongo database.

How to setup database?

 1.download database and you have to install
      https://www.postgresql.org/download/windows/
 2.via docker
  
Now a days no body , installing databases directly into machine, rather, we can install via docker.

For training purposes we are going to use "immemory database". You dont need to install database manually either directly or via docker.

In-Memory Databases:
1.sqlite

2.Database drivers
 It is set of js programs to connect with databases, and sending sql statements.

npx create-next-app@latest
√ What is your project named? ... db-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

we are going to use sqlite database...

Any database we need to install database dirvers for prisma.

we are going to use sqlite database...

Any database we need to install database dirvers for prisma.

3.Install sqlite database driver
G:\IBM\2025\June\NextJs\db-app>npx prisma init --datasource-provider sqlite
Need to install the following packages:
prisma@6.9.0
Ok to proceed? (y) y

Fetching latest updates for this subcommand...

✔ Your Prisma schema was created at prisma/schema.prisma
  You can now open it in your favorite editor.

warn You already have a .gitignore file. Don't forget to add `.env` in it to not commit any private information.

Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Run prisma db pull to turn your database schema into a Prisma schema.
3. Run prisma generate to generate the Prisma Client. You can then start querying your database.
4. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm

More information in our documentation:
https://pris.ly/d/getting-started

........................................................................................................................................................................................................................................
									    ORM Fundamentals
.......................................................................................................................................................................................................................................
What is orm?
Object Relational Mapping
 |          |     		  |
Entity RDBMS    Binding

In Database programs, we use sql query for creating,inserting, updating, deleting

In ORM World, SQL queries are abstracted by apis like save, findAll, findById, remove,update..

Entity Represents a "table" in the database.

Schema :
  The plan or structure

Define Model (Enity)

model User {

}
model Product {

}

Fields:
 Fields are mapped in the table as columns

Syntax:

model ModelName { 
 fieldName Type attributes
}

model Comment{
 id Int @id @default(autoincrement())
 title String
 content String
}

id -  column Name(field)
Int - Datatype
@id -  attribute - Primiary Key
@default - attribute- what is value we are going to assign to primary key
autoincrement - function which generates values...

Where to define this model?
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Table Structure
model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

Generate tables inside database and create sql quries:


G:\IBM\2025\June\NextJs\db-app>npx prisma migrate dev --name init
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource "db": SQLite database "dev.db" at "file:./dev.db"

SQLite database dev.db created at file:./dev.db

Applying migration `20250613064450_init`

The following migration(s) have been created and applied from new schema changes:

migrations/
  └─ 20250613064450_init/
    └─ migration.sql

Your database is now in sync with your schema.

Running generate... (Use --skip-generate to skip the generators)

✔ Generated Prisma Client (v6.9.0) to .\node_modules\@prisma\client in 52ms


Testing whether database tables are created or not
npx prisma studio

..........................................................................................................................................................................................................................................
										Prisma Client api
..........................................................................................................................................................................................................................................
Prisma Client api is used to talk database from rest apis.

src/lib/prisma.js
//Prisma client api 
import { PrismaClient } from "@prisma/client";
const globalForPrisma = global
export const prisma = globalForPrisma.prisma || new PrismaClient({ log: ["query"] })
.......................................................................................................................................................................................................................................											REST API with Prisma
.......................................................................................................................................................................................................................................


src/app/api/users/route.js


//write rest api which talks to database via prisma client

import { prisma } from "@/app/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(req) {
    const users = await prisma.user.findMany()
    return NextResponse.json(users)
}
//post 
export async function POST(req) {
    try {
        const user = await req.json()
        const res = await prisma.user.create({
            data: user
        })
        return NextResponse.json(res, {
            status: 201, headers: {
                'Content-Type': 'application/json', 'url': '/api/create'
            }
        })
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: err.status })
    }
}

src/app/api/users/[id]/route.js
import { prisma } from "@/app/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(req, { params }) {
    try {
        const id = (await params).id
        const user = await prisma.user.findUnique({
            where: {
                id: id
            }
        })
        if (!user) {
            return NextResponse.json({ message: 'User not found' }, {
                status: 404, headers: {
                    'Content-Type': 'application/json'
                }
            })
        }
        return NextResponse.json(user)
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: err.status })
    }
}

export async function PUT(req, { params }) {
    try {
        const id = (await params).id
        const payload = await req.json()
        const tmpUser = await prisma.user.findUnique({
            where: {
                id: id
            }
        })
        if (tmpUser) {
            const user = await prisma.user.update({
                where: {
                    id: id
                },
                data: payload
            })
            return NextResponse.json(user)

        } else {
            return NextResponse.json({ message: `No User found with ${id}` }, {
                status: 404, headers: {
                    'Content-Type': 'application/json'
                }
            })
        }
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: err.status })
    }
}

export async function DELETE(req, { params }) {
    try {
        const id = (await params).id
        const user = await prisma.user.findUnique({
            where: {
                id: id
            }
        })
        if (user) {
            await prisma.user.delete({
                where: {
                    id: id
                }
            })
            return NextResponse.json({ message: `USER with id ${id} has been successfully deleted` }, {
                status: 201, headers: {
                    'Content-Type': 'application/json'
                }
            })
        } else {
            return NextResponse.json({ message: `No User found with ${id}` }, {
                status: 404, headers: {
                    'Content-Type': 'application/json'
                }
            })
        }
    }
    catch (err) {
        return NextResponse.json({ err: err }, { status: err.status })
    }
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
...........................................................................................................................................................................................................................................
									Database Operations with User Interface
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

.env
# IF YOU read this in client components
NEXT_PUBLIC_USERS_URL="http://localhost:3000/api/users"

src/app/global.css
form {
  max-width: 500px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

form input {
  width: calc(100% - 20px);
  margin-bottom: 15px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

form button {
  width: 100%;
  padding: 10px;
  background-color: #0070f3;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #005bb5;
}

ul {
  list-style: none;
  padding: 0;
  max-width: 600px;
  margin: 20px auto;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

li {
  padding: 15px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

li:last-child {
  border-bottom: none;
}

li .user-details {
  flex-grow: 1; /* Allow the user details to take all available space */
}

li .actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end; /* Ensure buttons are aligned to the right */
}

button {
  padding: 5px 10px;
  background-color: #f44336;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #d32f2f;
}

button:first-of-type {
  background-color: #4caf50;
}

button:first-of-type:hover {
  background-color: #388e3c;
}


src/app/users/components/users.jsx


'use client'
import { useState, useEffect } from 'react';

export function User() {
    const [users, setUsers] = useState([]);
    const [formData, setFormData] = useState({ id: '', name: '', email: '', role: '' });
    const [isEditing, setIsEditing] = useState(false);


    useEffect(() => {
        //if you want to read environment variables in the client , you have to add with
        //NEXT_PUBLIC_YOURVARIABLENAME
        fetch(process.env.NEXT_PUBLIC_USERS_URL)
            .then((res) => res.json())
            .then((data) => setUsers(data));
    }, []);


    const handleEdit = (user) => {
        setFormData(user);
        setIsEditing(true);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (isEditing) {
            // Update user
            const res = await fetch(`${process.env.NEXT_PUBLIC_USERS_URL}/${formData.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: formData.name, email: formData.email, role: formData.role }),
            });

            if (res.ok) {
                const updatedUser = await res.json();
                setUsers((prev) => prev.map((user) => (user.id === updatedUser.id ? updatedUser : user)));
            }
            setIsEditing(false);
        } else {
            // Create new user
            const res = await fetch(process.env.NEXT_PUBLIC_USERS_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: formData.name, email: formData.email, role: formData.role }),
            });

            if (res.ok) {
                const newUser = await res.json();
                setUsers((prev) => [...prev, newUser]);
            }
        }

        setFormData({ id: '', name: '', email: '', role: '' });
    };
    const handleDelete = async (id) => {
        const res = await fetch(`${process.env.NEXT_PUBLIC_USERS_URL}/${id}`, {
            method: 'DELETE',
        });

        if (res.ok) {
            setUsers((prev) => prev.filter((user) => user.id !== id));
        }
    };

    return (
        <div>
            <h1 style={{ textAlign: 'center', fontSize: '35px' }}>User Management</h1>
            <form onSubmit={handleSubmit}>
                <div>
                    <input
                        type="text"
                        placeholder="Name"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        required
                    />
                </div>
                <input
                    type="email"
                    placeholder="Email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    required
                />
                <input
                    type="text"
                    placeholder="Role"
                    value={formData.role}
                    onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                    required
                />
                <button type="submit">{isEditing ? 'Update User' : 'Add User'}</button>
            </form>
            <ul>
                {users.map((user) => (
                    <li key={user.id}>
                        <div className="user-details">
                            <span>
                                {user.name} ({user.email}) - {user.role}
                            </span>
                        </div>
                        <div className="actions">
                            <button onClick={() => handleEdit(user)}>Edit</button>
                            <button onClick={() => handleDelete(user.id)}>Delete</button>
                        </div>
                    </li>
                ))}
            </ul>

        </div>
    );
}

src/app/user/page.js
import { User } from "./components/users";

export default function UsersPage() {
    return <div>
        <User />
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
.				 						Server actions
..........................................................................................................................................................................................................................................

	Server Actions are a feature in Next.js 15 that allow you to perform server-side operations directly from the client without creating an API route or an explicit handler.

 This feature simplifies data fetching, form submissions, or other server-side logic by integrating it seamlessly into your component tree.

Key Features of Server Actions in Next.js 15:

1.Server-First Logic:
  Runs on the server, avoiding unnecessary client-side processing.
  Can securely access server-only resources like databases, environment variables, and APIs.
  Direct Invocation from Components:

  Trigger server-side logic directly via React components.
  No need for separate API endpoints.

2.Optimized Performance:
 Reduces data fetching overhead.
 Automatically optimizes the server-client data flow.

3.Type Safety:
  Built-in TypeScript support ensures type safety across your components and server logic.


Integrated with App Router:

Perfectly fits into Next.js's App Router system for organizing server and client code.


Getting coding:

'use server'
export async function save(data){
   //logic
 }
npx create-next-app@latest
√ What is your project named? ... server-actions
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Use case: How to invoke server actions from the client component.

Counter Increment logic inside client component using client side

src/app/counter/components/counter.jsx
'use client'

import { useState } from "react"

export default function Counter() {
    const [value, setValue] = useState(0)

    return <div>
        <h1>Counter : {value}</h1>
        <button onClick={() => {
            console.log('counter client')
            setValue(value + 1)
        }}>+</button>
    </div>
}
src/app/counter/page.js
import Counter from "@/app/counter/components/Counter";

export default function CounterPage(){
    return <div className="m-20">
            <Counter/>
    </div>
}
Now you can notice this logic is executed in client.

						Can i write increment logic inside server, when i click the button which is part of client

Yes! - Server Actions

Server actions are simple function function which may take arg or return value...

src/app/actions/counterAction.js

'use server'

let count = 0
export async function increment() {
    console.log('Running in server', count)
    //return count - Promise.resolve(count)
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(count++)
        }, 5000)
    })
}

src/app/counter/components/Counter.jsx

'use client'

import { increment } from "@/app/actions/counterAction"
import { useState, useTransition } from "react"

export default function Counter({ initalCount = 0 }) {
    const [isPending, startTransition] = useTransition()
    const [count, setCount] = useState(initalCount)
    const handleIncrement = () => {
        startTransition(async () => {
            const newCount = await increment()
            setCount(newCount)
        })
    }
    return <>
        <h1>{isPending ? 'Updating...' : `count:${count}`}</h1>
        <button onClick={handleIncrement} disabled={isPending}>
            +
        </button>

    </>
}
src/app/counter/page.js
import Counter from "@/app/counter/components/Counter";

export default function CounterPage(){
    return <div className="m-20">
            <Counter/>
    </div>
}

										Forms and Server actions

'use server'

src/app/actions/userAction.js

export async function createUser() {

    return {
        success: true, message: 'Data Saved Successfully'
    }
}

src/app/forms/userForm.jsx

'use client'

import { createUser } from "@/app/actions/userAction"

export default function UserForm() {
    async function handleSubmit(evt) {
        evt.preventDefault()
        //invoke server actions
        try {
            const result = await createUser()
            alert(JSON.stringify(result))
        }
        catch (err) {

        }
    }
    return <form onSubmit={handleSubmit}>
        <div>
            <input type="text" name="name" placeholder="Name" required />
        </div>
        <div>
            <input type="email" name="email" placeholder="Email" required />
        </div>
        <div>
            <button type="submit">Create User</button>
        </div>
    </form>
}

How to invoke server actions from the server component?

src/app/user/page.js
import { createUser } from "@/app/actions/userAction"

export default async function UserPage(){
    const response = await createUser()
    return <div>
            {JSON.stringify(response)}
    </div>
}
Output:
{"success":true,"message":"Data Saved Successfully"}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Passing data from client Component to Server actions
												Client Form to Server Actions
***********************************************************************************************************************************************************

src/app/actions/userAction.js
'use server'

export async function createUser(data) {
    console.log(data)
    return {
        success: true, message: 'Data Saved Successfully'
    }
}

src/app/user/userForm.jsx
'use client'

import { createUser } from "@/app/actions/userAction"

export default function UserForm() {
    async function handleSubmit(evt) {
        evt.preventDefault()
        //invoke server actions
        try {
            //read form values
            const user = {
                name: evt.target.name.value,
                email: evt.target.email.value
            }
            const result = await createUser(user)
            alert(JSON.stringify(result))
        }
        catch (err) {

        }
    }

    return <form onSubmit={handleSubmit}>
        <div>
            <input type="text" name="name" placeholder="Name" required />
        </div>
        <div>
            <input type="email" name="email" placeholder="Email" required />
        </div>
        <div>
            <button type="submit">Create User</button>
        </div>
    </form>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									 	Server Side Redirection
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
 	  To redirect after a form submission in Next.js 15 with Server Actions, you can use the "redirect" function from the Next.js router or perform a client-side redirect after the form submission is complete.

Here’s how you can handle both server-side and client-side redirects.

1. Redirect After Form Submission (Server-Side)
If you want to redirect the user immediately after the form submission directly on the server, you can use the redirect() method in Server Actions.

In Next.js 15, the redirect() function can be used directly inside the server action to navigate the user after the form is processed.

src/app/success/page.js
export default function SuccessPage() {
    return <h1>SuccessPage</h1>
}

src/app/actions/userAction.js
'use server'

import { redirect } from "next/navigation"

export async function createUser(data) {
    // Todo: perform server side logic then forward to success page
    console.log(data)
    redirect('/success')
}

src/app/user/component/userForm.jsx
'use client'

import { createUser } from "@/app/actions/userAction"

export default function UserForm() {
    async function handleSubmit(evt) {
        evt.preventDefault()
        //invoke server actions
        try {
            //read form values
            const user = {
                name: evt.target.name.value,
                email: evt.target.email.value
            }
            await createUser(user)
            
        }
        catch (err) {

        }
    }

    return <form onSubmit={handleSubmit}>
        <div>
            <input type="text" name="name" placeholder="Name" required />
        </div>
        <div>
            <input type="email" name="email" placeholder="Email" required />
        </div>
        <div>
            <button type="submit">Create User</button>
        </div>
    </form>
}

Note: 
 after running,you can submit data to server action, and server action forwards to success page.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Passing data from Server Component to Server Actions
												Server Form to Server Actions
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Can you run forms in server or Can you submit data via server Component?

Yes.

Note: Convert Client Component into server Component - Client form to server Form

Rules:
1. No form listener is added

<form  action="serveraction"></form>
		|
		Where to submit this form.
			|
			Server Program

<form onSubmit={handleSubmit}/> - client side form submission

Server side form submission:

java syntax:
    <form method="post" action="users.do"> </form>	
    <form method="post" action="users.jsp"></form>

Php Syntax
<form method="post" action="users.php"></form>

Dot.net:
<form method="post" action="users.aspx"></form>

Next.js
<form  action={serveraction}></form>

src/app/user/components/userForm.jsx

import { createUser } from "@/app/actions/userAction"

//server component
export default function UserForm() {

    return <form action={createUser} method="POST">
        <div>
            <input type="text" name="name" placeholder="Name" required />
        </div>
        <div>
            <input type="email" name="email" placeholder="Email" required />
        </div>
        <div>
            <button type="submit">Create User</button>
        </div>
    </form>
}

src/app/actions/userAction.js
'use server'

import { redirect } from "next/navigation"

export async function createUser(data) {
    // Todo: perform server side logic then forward to success page
    console.log(data)
    console.log(data.get('name') , data.get('email'))
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Redirections and Passing data to Redirected Page
	  								       Transfering data from Server action to Success Page

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

There are many ways
1.Via Url -  Query Strings
2.Via Session Object (cookies)


QueryString syntax:
  redirect(`/success?name=${encodeURIComponent(data.get("name"))}&email=${encodeURIComponent(data.get("email"))}`);

eg:

src/app/actions/userAction.js
'use server'

import { redirect } from "next/navigation"

export async function createUser(formData) {
     redirect(`/success?name=${encodeURIComponent(formData.get("name"))}&email=${encodeURIComponent(formData.get("email"))}`);
}

src/app/user/components/userForm.jsx

import { createUser } from "@/app/actions/userAction"

//server component
export default function UserForm() {

    return <form action={createUser} method="POST">
        <div>
            <input type="text" name="name" placeholder="Name" required />
        </div>
        <div>
            <input type="email" name="email" placeholder="Email" required />
        </div>
        <div>
            <button type="submit">Create User</button>
        </div>
    </form>
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								How to read Query String in success Page
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Using 'useSearchParams' hook we can read query strings transfered from server actions.
Since we use hook , must be converted into client component.

src/app/success/page.js
'use client'
import { useSearchParams } from 'next/navigation';

export default function SuccessPage() {
    const searchParams = useSearchParams()
    const name = searchParams.get('name');
    const email = searchParams.get('email');

    return <div>
        <h1>User Form Submitted Successfully!!</h1>
        <h1>Name : {name}</h1>
        <h2>Email : {email}</h2>
    </div>
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											Server actions with Database

√ What is your project named? ... serveractions-dbapp
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Initalize the prisma with sqlite : Follow the previous steps

schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
}


src/app/actions/userAction.js

"use server";

import { prisma } from "@/app/lib/prisma";
import { revalidatePath } from "next/cache";

export async function getUsers() {
    return await prisma.user.findMany({ orderBy: { id: "desc" } });
}

export async function addUser(name, email) {
    await prisma.user.create({ data: { name, email } });
    revalidatePath("/");
}

export async function updateUser(id, name, email) {
    await prisma.user.update({
        where: { id: Number(id) },
        data: { name, email },
    });
    revalidatePath("/");
}

export async function deleteUser(id) {
    await prisma.user.delete({ where: { id: Number(id) } });
    revalidatePath("/");
}

src/app/user/page.js
"use client"; // we'll need interactivity

import { getUsers, addUser, updateUser, deleteUser } from "@/app/actions/userActions";

import { useState,useEffect } from "react";

export default function HomePage() {
    const [users, setUsers] = useState([]);
    const [editUser, setEditUser] = useState(null);
    const [form, setForm] = useState({ name: "", email: "" });

    useEffect(() => {
        async function fetchUsers() {
            const data = await getUsers();
            setUsers(data);
        }
        fetchUsers();
    }, []);
    // Add User
    async function handleAdd(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const name = formData.get("name");
        const email = formData.get("email");

        await addUser(name, email);
        setUsers(await getUsers()); // refresh
        e.target.reset();
    }

    // Start Editing
    function handleEdit(user) {
        setEditUser(user.id);
        setForm({ name: user.name, email: user.email });
    }

    // Save Update
    async function handleUpdate(e) {
        e.preventDefault();
        await updateUser(editUser, form.name, form.email);
        setUsers(await getUsers()); // refresh
        setEditUser(null); // exit edit mode
        setForm({ name: "", email: "" });
    }

    // Delete User
    async function handleDelete(id) {
        await deleteUser(id);
        setUsers(await getUsers());
    }

    return (
        <div className="p-6">
            <h1 className="text-2xl font-bold">User Management</h1>

            {/* Add User */}
            {!editUser && (
                <form onSubmit={handleAdd} className="my-4 flex gap-2">
                    <input
                        name="name"
                        placeholder="Name"
                        className="border px-2"
                        required
                    />
                    <input
                        name="email"
                        placeholder="Email"
                        className="border px-2"
                        required
                    />
                    <button type="submit" className="bg-blue-500 text-white px-4">
                        Add
                    </button>
                </form>
            )}

            {/* Edit Form */}
            {editUser && (
                <form onSubmit={handleUpdate} className="my-4 flex gap-2">
                    <input
                        value={form.name}
                        onChange={(e) => setForm({ ...form, name: e.target.value })}
                        placeholder="Name"
                        className="border px-2"
                        required
                    />
                    <input
                        value={form.email}
                        onChange={(e) => setForm({ ...form, email: e.target.value })}
                        placeholder="Email"
                        className="border px-2"
                        required
                    />
                    <button type="submit" className="bg-yellow-500 text-white px-4">
                        Update
                    </button>
                    <button
                        type="button"
                        onClick={() => {
                            setEditUser(null);
                            setForm({ name: "", email: "" });
                        }}
                        className="bg-gray-400 text-white px-4"
                    >
                        Cancel
                    </button>
                </form>
            )}

            {/* User List */}
            <ul className="space-y-4">
                {users.map((user) => (
                    <li
                        key={user.id}
                        className="border p-2 flex justify-between items-center"
                    >
                        <div>
                            <p>
                                <b>{user.name}</b> ({user.email})
                            </p>
                        </div>

                        <div className="flex gap-2">
                            <button
                                onClick={() => handleEdit(user)}
                                className="bg-yellow-500 text-white px-2"
                            >
                                Edit
                            </button>

                            <button
                                onClick={() => handleDelete(user.id)}
                                className="bg-red-500 text-white px-2"
                            >
                                Delete
                            </button>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					  			Advanced Routing - Dynamic Routes
			 	  				    "Catch All Segement Routing"
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Dynamic Routing:

/todos/1
  
todos 
 |
   page.js
 [id]
    |
    page.js

Here we are displaying different todo's page - todo's details page

/shop ----> page.js

/shop/electronics 
/shop/food
/shop/machinery
/shop/medicines
/shop/?     - cloths
Here i want to display different category of products not same product details

shop
 |
 [electronics] -page.js
   |
   page.js
 |
 [food] -page.js
|
 [machinery]-   page.js
|
 [medicines]-   page.js
|
[?] -page.js

  					 What if dynamic routes are not predefined in advance...
                      	   	This where "catchAll dynamic routing segment" comes into picture


The "catchAll" segment is used to capture dynamic route segments that can handle any number of path segments in the URL. This is useful for routing in scenarios where the exact number of path segments is uncertain.

Example: Blog Application

Let's assume you are building a blog application, and you want to allow access to various types of blog posts, such as categories, authors, and specific post titles.

Folder Structure:

With Catch All:

shop
  |
  page.js
 [...slug]
   |
  page.js


√ What is your project named? ... catchall-routing
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					  			Advanced Routing - Dynamic Routes
			 	  				    "Catch All Segement Routing"
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Dynamic Routing:

/todos/1
  
todos 
 |
   page.js
 [id]
    |
    page.js

Here we are displaying different todo's page - todo's details page

/shop ----> page.js

/shop/electronics 
/shop/food
/shop/machinery
/shop/medicines
/shop/?     - cloths
Here i want to display different category of products not same product details

shop
 |
 [electronics] -page.js
   |
   page.js
 |
 [food] -page.js
|
 [machinery]-   page.js
|
 [medicines]-   page.js
|
[?] -page.js

  					 What if dynamic routes are not predefined in advance...
                      	   	This where "catchAll dynamic routing segment" comes into picture


The "catchAll" segment is used to capture dynamic route segments that can handle any number of path segments in the URL. This is useful for routing in scenarios where the exact number of path segments is uncertain.

Example: Blog Application

Let's assume you are building a blog application, and you want to allow access to various types of blog posts, such as categories, authors, and specific post titles.

Folder Structure:

With Catch All:

shop
  |
  page.js
 [...slug]
   |
  page.js


√ What is your project named? ... catchall-routing
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*


/app/shop/page.js
export default function Shop(){
    return <h1>Shop Page</h1>
}

src/shop/[...slug]/page.js

export default async function ShopCateory({ params }) {
    const values = await params
    return <h1>Shop Page -Category {JSON.stringify(values)}</h1>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Display page based on Data
***********************************************************************************************************************************************************
src/app/docs/page.js

export default function DocsHome(){
    return <h1>
        Docs Home Page
    </h1>
}

src/app/docs/[...slug]/page.js
import { notFound } from "next/navigation"

const docs = {
    //path: path Content
    "getting-started": "Heres How to get started",
    "advanced": "This is advanced Guide"
}

export default async function DocsDetailsPage({ params }) {
    const slug = (await params).slug

    const path = slug.join("/")
    const content = docs[path]
    if (!content) {
        notFound()
    }
    return <div className="p-6">
        <h1>Docs :{path}</h1>
        <p>{content}</p>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
					     		Advanced Routing - Dynamic Routes
		   			    		"Optional Catch All Segement Routing"
...........................................................................................................................................................................................................................................
With Catch All:

shop
  |
  page.js
 [...slug]
   |
  page.js

/shop/tops
/shop/tops/tshirt
/shop/dress/mens/shirt

In CatchAll segement routing,the root folder has page.js, without that page.js what will happen?
  You will get 404 - Page Not found

http://localhost:3000/shop

 There would be use case, i dont want page.js inside /shop 

 Thats where we use "Optional CatchAll" segement is used

With Optional CatchAll Segment:

shop
  |
 [[...slug]] --optional CatchAll Segement...
   |
   page.js

√ What is your project named? ... optionalcatchall-routing
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

src/shop/[[...slug]]/page.js

export default async function ShopCateory({ params }) {
    const values = await params
    return <h1>Shop Page -Category {JSON.stringify(values)}</h1>
}

src/docs/[[...slug]]/page.js
import { notFound } from "next/navigation"

const docs = {
    //path: path Content
    "docs" : "Welcome to Docs Home Page",
    "getting-started": "Heres How to get started",
    "advanced": "This is advanced Guide"
}

export default async function DocsDetailsPage({ params }) {
    const slug = (await params).slug

    const path = slug ? slug.join("/") : "docs"
    const content = docs[path]
    if (!content) {
        notFound()
    }
    return <div className="p-6">
        <h1>Docs :{path}</h1>
        <p>{content}</p>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Deep nested Items
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
src/products/[[...slug]]/page.js

import Link from "next/link";

const catalog = {
  index: [
    {
      name: "Electronics",
      slug: "electronics",
      children: [
        {
          name: "Mobiles",
          slug: "mobiles",
          children: [
            {
              name: "iPhone 15",
              slug: "iphone-15",
              type: "product",
              price: "₹79,999",
            },
            {
              name: "Samsung Galaxy S24",
              slug: "samsung-galaxy-s24",
              type: "product",
              price: "₹69,999",
            },
          ],
        },
        {
          name: "Laptops",
          slug: "laptops",
          children: [
            {
              name: "Lenvo",
              slug: "LenvoThinkPad",
              type: "product",
              price: "₹79,999",
            },
            {
              name: "Dell",
              slug: "dell",
              type: "product",
              price: "₹79,999",
            }
          ],
        },
      ],
    },
    {
      name: "Fashion",
      slug: "fashion",
      children: [
        {
          name: "Men",
          slug: "men",
          children: [
            { name: "T-Shirts", slug: "t-shirts", type: "product", price: "₹999" },
            { name: "Shoes", slug: "shoes", type: "product", price: "₹1999" },
          ],
        },
        { name: "Women", slug: "women", children: [] },
      ],
    },
    {
      name: "Books",
      slug: "books",
      children: [],
    },
  ],
};

function findNode(catalog, pathSegments) {
  let currentLevel = catalog.index;

  for (let segment of pathSegments) {
    const found = currentLevel.find((node) => node.slug === segment);
    if (!found) return null;
    if (found.type === "product") return found; // stop at product
    currentLevel = found.children || [];
  }

  return { children: currentLevel }; // return category with sub-items
}

export default async function ProductsPage({ params }) {
  const { slug } = await params;
  const path = slug || [];

  const node = findNode(catalog, path);

  if (!node) {
    return <h1 className="p-6 text-xl font-bold">Not Found</h1>;
  }

  // Product page
  if (node.type === "product") {
    return (
      <div className="p-6">
        <h1 className="text-2xl font-bold">{node.name}</h1>
        <p className="mt-2 text-gray-600">{node.price}</p>
      </div>
    );
  }

  // Category page
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">
        {path.length === 0 ? "All Categories" : path.join(" → ")}
      </h1>
      <ul className="list-disc pl-6 space-y-2">
        {node.children.map((item) => (
          <li key={item.slug}>
            <Link
              href={`/products/${[...path, item.slug].join("/")}`}
              className="text-blue-600 hover:underline"
            >
              {item.name}
            </Link>
            {/* <div>
              {JSON.stringify(item)}

            </div> */}
          </li>
        ))}
      </ul>
      <p>
        This is product page
      </p>
    </div>
  );
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Advanced Routing- Paralle Routing
What is Parallel Route?

 Generally inside a layout, we render only one page by default.

What if i want to render "Multiple Pages" inside single a layout simultaneously or conditionally..

"Parallel Routing allow you to render pages simultaneously or conditionally render one or more pages in the same layout.
For highly section of an app, such as dashboards, and feeds on sites,Parellel routing can be used to implement complex routing patterns.


Component View:

 <Layout>
    <Page/>
 </Layout>

Component View: Multiple Pages within a layout.

<Layout>
   <Page1/>
   <Page2/>
</Layout>

Conditional Page Rendering:

<Layout>
   {condition ? <ThisPage/>:<ThatPage/>
</Layout>


√ What is your project named? ... parallelrouting-app
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Basic App Structure:

src/app
   |
  page.js
  layout.js - root layout

 info
  |
  page.js
  layout.js -

Here only info page is inserted into layout
 I want to display two different pages called "team" and "player" within  info layout.

folder Convention:
 @FolderName 
	|
	page
	layout

src/app/game/@team/layout.js
export default function TeamsLayout({children}){

    return <div id="teamsLayout">
         
       {children}
    </div>
}
src/app/game/@team/page.js

export default function TeamPage(){
    return <div>
        <h1>TeamPage Page</h1>
    </div>
}

src/app/game/@player/layout.js
export default function PlayerLayout({children}){

    return <div id="playerLayout">         
       {children}
    </div>
}

src/app/game/@player/page.js
export default function PlayersPage(){

    return <div>
        <h1>Players Page</h1>
    </div>
}


src/app/game/layout.js
export default function GameLayout(props) {
    return <div id="gameslayout">
        {/* Game Page */}
        {props.children}
        {/* Teams layout and page */}
        {props.team}
        {/* Players Page */}
        {props.player}
    </div>
}
src/app/game/page.js
export default function GamePage(){
    return <div>
        <h1>Game Page</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
..........................................................................................................................................................................................................................................
								Advanced Routing - Route Groups
...........................................................................................................................................................................................................................................

What is Route Group?
 In the app dir, nested folders are mapped to URL Paths, How ever you mark a folder as a route group to prevent     the folder being included in the Route's URL path


src/app/dashboard/page.js ------> /dashboard

You can mark a folder as a Route group to prevent the folder being included in the route url path
Which is some times are called hidden dirs.

Use case:
	 incase you are organizing your project into multiple folders those folders dont want to include in the url

npx create-next-app@latest
√ What is your project named? ... route-group
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

folder convention
	(folderName) (auth)
		|	
		login


/app/(auth)/login/page.js
export default function loginPage(){
    return <h1>Login Page</h1>
}
/app/(auth)/register/page.js
export default function RegistrationPage() {
    return <h1>Registeration</h1>
}

/app/(marketing)/about/page.js
export default function AboutPage() {
    return <h1>About</h1>
}

										Layouts and Route Groups



/src/app/(auth)/layout.js
export default function AuthLayout({children}){
    return <div id="AuthLayout">
            {children}
    </div>
}
This layout shared by login and registration pages

You can have spefic layout as login.

src/app/(auth)/login/layout.js
export default function LoginLayout({children}){
    return <div id="LoginLayout">
            {children}
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Route Interceptor
									  (Kind of Parrel Routing)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Parallel Routing is nothing showing multiple pages with in single layout , simultaneously or conditionally.
Showing two pages on the same layout , top of one another - like instagram/Twitter image preview opening without leaving current feed)-Modal dialogs

npx create-next-app@latest
√ What is your project named? ... route-interceptor
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*


(..) - Router Interceptor
@FolderName - ParrelRoute
default.js  - Fallback UI when no modal is open

default.js
   export default function DefaultModal(){
		return null // empty slot
    }			
When no modal is open, render nothing.
Steps:

1.create mock-data

src/app/mock-data/photo.js

export default [
    {
        id: '1',
        name: 'Kevin Canlas',
        href: 'https://twitter.com/kvncnls/status/1471832344986324998',
        username: '@kvncnls',
        imageSrc: 'https://pbs.twimg.com/media/FGz_t1wXIAIFyT-?format=jpg',
    },
    {
        id: '2',
        name: 'Pedro Duarte',
        href: 'https://twitter.com/peduarte/status/1463897468383412231',
        username: '@peduarte',
        imageSrc: 'https://pbs.twimg.com/media/FFDOtLkWYAsWjTM?format=jpg',
    },
    {
        id: '3',
        name: 'Ahmad Awais',
        href: 'https://twitter.com/MrAhmadAwais/status/1338151679083032577',
        username: '@MrAhmadAwais',
        imageSrc: 'https://pbs.twimg.com/media/EpIR281XIAMUrEM?format=jpg',
    },
    {
        id: '4',
        name: 'Leandro Soengas',
        href: 'https://twitter.com/lsoengas/status/1352302741339693061',
        username: '@lsoengas',
        imageSrc: 'https://pbs.twimg.com/media/EsRYK8oWMAEkObV?format=jpg',
    },
    {
        id: '5',
        name: 'Samina',
        href: 'https://twitter.com/saminacodes/status/1466479548837482497',
        username: '@saminacodes',
        imageSrc: 'https://pbs.twimg.com/media/FFn7X76VgAEVTgs?format=jpg',
    },
    {
        id: '6',
        name: 'lafond.eth',
        href: 'https://twitter.com/laf0nd/status/1464640065615929346',
        username: '@laf0nd',
        imageSrc: 'https://pbs.twimg.com/media/E374pyaWEAMCT2R?format=jpg',
    },
    {
        id: '7',
        name: '山岸和利💛',
        href: 'https://twitter.com/ykzts/status/1426358452356407297',
        username: '@ykzts',
        imageSrc: 'https://pbs.twimg.com/media/E8txb2yVkAQxRVw?format=jpg',
    },
    {
        id: '8',
        name: 'Altngelo',
        href: 'https://twitter.com/AfterDarkAngelo/status/1456372859090075648',
        username: '@AfterDarkAngelo',
        imageSrc: 'https://pbs.twimg.com/media/E374pyaWEAMCT2R?format=jpg',
    },
    {
        id: '9',
        name: 'Matias Baldanza',
        href: 'https://twitter.com/matiasbaldanza/status/1404834163203715073',
        username: '@matiasbaldanza',
        imageSrc: 'https://pbs.twimg.com/media/E374pyaWEAMCT2R?format=jpg',
    },
];

2.next configuration - next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
        domains:['pbs.twimg.com']
    }
};
export default nextConfig;

3.Create Master page

src/app/page.js

import Link from "next/link";
import photos from "./mock-data/photos";
import Image from "next/image";

export default function Home() {
  return <div className="container mx-auto">
    <h1 className="text-center text-4xl font-bold m-10">PhotoGallary App</h1>
    {/* render photos */}
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 auto-rows-max gap-6 m-10">
      {photos.map(photo => {
        return <Link key={photo.id} href={`/photos/${photo.id}`}>
          <Image alt="Your Image"
            src={photo.imageSrc}
            height={500}
            width={500}
            className="w-full object-cover aspect-square"
          />
        </Link>
      })}
    </div>
  </div>
}

4.Create Detail Page

src/app/photos/[id]/page.js
import photos from "@/app/mock-data/photos"
import Image from "next/image"

export default async function PhotoDetailsPage({ params }) {
    const id = (await params).id
    const photo = photos.find(photo => photo.id === id)
    return <div className="container mx-auto my-10">
        <Image alt="Your Image"
            src={photo.imageSrc}
            height={100}
            width={100}
            className="w-full object-cover aspect-square"
        />
    </div>
}

5.in order to display image separatly, we can create a separte Frame Component

src/app/components/frame.jsx
import Image from "next/image"

export default function Frame({ photo }) {
    return <div>
        <Image alt="Your Image"
            src={photo.imageSrc}
            height={100}
            width={100}
            className="w-full object-cover aspect-square"
        />
        <div>
            <h1 className="text-bold">{photo.name}</h1>
            <h2>Taken by{photo.username}</h2>
        </div>
    </div>
}

6.Replace with FrameComponent

src/app/photos/[id]/page.js

import Frame from "@/app/components/frame"
import photos from "@/app/mock-data/photos"

export default async function PhotoDetailsPage({ params }) {
    const id = (await params).id
    const photo = photos.find(photo => photo.id === id)
    return <div className="container mx-auto my-10">
        <Frame photo={photo} />
    </div>
}

7.Modal dialog

src/app/components/model.jsx

'use client'

import { useRouter } from "next/navigation"
import { useCallback, useEffect, useRef } from "react"

export default function Modal({ children }) {
    const overlay = useRef(null)
    const wrapper = useRef(null)
    const router = useRouter()

    const onDismiss = useCallback(() => {
        router.back()
    }, [router])

    //close the modal dialog
    const onClick = useCallback((e) => {
        if (e.target === overlay.current || wrapper.current) {
            //if you have clicked on photo
            if (onDismiss) onDismiss()
        }
    })
    //close the dialog : when you press escape key
    const onKeyDown = useCallback(e => {
        if (e.key === 'Escape') {
            onDismiss()
        }
    }, [onDismiss])

    //componentDidUpdate
    useEffect(() => {
        document.addEventListener('keydown', onKeyDown)
        //componentWillUnMount
        return () => document.removeEventListener('keydown', onKeyDown)
    }, [onkeydown])

    return <div ref={overlay} onClick={onClick}>
        {/* Within Modal we render Framework */}
        {/* This div will display Frame(Photo) */}
        <div ref={wrapper} style={{ backgroundColor: 'yellow' }} className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full sm:w-10/12 md:w-8/12 lg:w-1/2 p-6">
            {children}
        </div>
    </div>
}

Interceptor : Parral route
src/app/@modal/(.)photos/[id]/page.js

import photos from "@/app/mock-data/photo"
import Frame from "@/app/components/Frame"
import Modal from "@/app/components/Modal"

export default async function PhotoModal({ params }) {
    const id = (await params).id 
    const photo = photos.find((p) => p.id == id)
    return (
        <Modal>
            <Frame photo={photo} />
        </Modal>
    )
}

default.js - fallback page
src/app/@modal/default.js
export default function Default(){
    return null
}

default.js
src/app/default.js
src/app/@modal/default.js
export default function Default(){
    return null
}

src/app/layout.js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children, modal }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* Master Page */}
        {children}
        {/* Modal */}
        {modal}
      </body>
    </html>
  );
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										SSG -Static Site Generation
...........................................................................................................................................................................................................................................

if pages uses Static Generation, the page html is generated at  "Build time"

When you run "next build" , during that time, pages are generated.

Generated HTML pages will then be reused on each request. It can be cached by CDN.

In Next.js , you can statically generate pages "with data or without data"

√ What is your project named? ... ssg-app
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
Use case: Static Site Generation without data:

Use case: Static Site Generation without data:

By default, Next.js pre render pages using "SSG" without fetching data.

src/app/about/page.js
export default function About(){
    return <h1>
        About
    </h1>
}

Note that this page does not require to fetch any external data to be pre-rendered.
In this case, next generate a single html file as per page during build time.

>npm run build

> ssg-app@0.1.0 build
> next build

   ▲ Next.js 15.3.3

   Creating an optimized production build ...
 ✓ Compiled successfully in 4.0s
 ✓ Linting and checking validity of types
 ✓ Collecting page data
 ✓ Generating static pages (6/6)
 ✓ Collecting build traces
 ✓ Finalizing page optimization

Route (app)                                 Size  First Load JS
┌ ○ /                                    5.63 kB         107 kB
├ ○ /_not-found                            977 B         102 kB
└ ○ /about                                 136 B         101 kB
+ First Load JS shared by all             101 kB
  ├ chunks/4bd1b696-67ee12fb04071d3b.js  53.2 kB
  ├ chunks/684-c85650275c47a38c.js       45.9 kB
  └ other shared chunks (total)          1.96 kB


○  (Static)  prerendered as static content

>npm start

Use case: Static Generation with Data:
.............................................................
Steps:

1.Create master page

src/app/todos/page.js

SSG APP with data:

=>you have to override the function called "generateStaticParams"
=>This function is called only during build time.

SSG with dynamic Route:

Steps:

1.create master page
src/app/todos/page.js
import Link from "next/link"

export async function fetchTodos() {
    const url = `https://jsonplaceholder.typicode.com/todos`
    const response = await fetch(url)
    return response.json()
}


export default async function TodosMasterPage() {
    const todos = await fetchTodos()
    return <div>
        <h1>Total Todos {todos.length}</h1>
        <ul>
            {
                todos.map(todo=>{
                    return <li>
                        <Link href={`/todos/${todo.id}`}>{todo.title}</Link>
                    </li>
                })
            }
        </ul>
    </div>
}

2.create Details Page


export async function fetchTodos() {
    const url = `https://jsonplaceholder.typicode.com/todos`
    const response = await fetch(url)
    return response.json()
}
export async function fetchTodosByid(id) {
    const url = `https://jsonplaceholder.typicode.com/todos/${id}`
    const response = await fetch(url)
    return response.json()
}

export default async function TodoDetailPage(props) {
    const todo = await fetchTodosByid(Number(props.params.id))
    return <div>
        <h2>id {todo.id}</h2>
        <p>title {todo.title}</p>
        <p>Status {todo.completed ? 'Ok' : 'Not Completed'}</p>
    </div>
}

//override funciton which is called during build time in order to prepare the page

export async function generateStaticParams() {
    const todos = await fetchTodos()
    //generate html pages for all todos(200 todos), if you have 200 records, 200 html files
    //to be generated

    return todos.map(todo => {
        //based on id only the pages are generated, id value must be string always.
        let id = todo.id.toString()
        return {
            //id: id
            id
        }
    });
}
npm run build

> ssg-app@0.1.0 build
> next build

  ▲ Next.js 14.2.3

   Creating an optimized production build ...
 ✓ Compiled successfully
 ✓ Linting and checking validity of types
 ✓ Collecting page data
 ✓ Generating static pages (207/207)
 ✓ Collecting build traces
 ✓ Finalizing page optimization

Route (app)                              Size     First Load JS
┌ ○ /                                    144 B          87.1 kB
├ ○ /_not-found                          871 B          87.8 kB
├ ○ /about                               144 B          87.1 kB
├ ○ /todos                               6.96 kB        93.9 kB
└ ● /todos/[id]                          144 B          87.1 kB
    ├ /todos/1
    ├ /todos/2
    ├ /todos/3
    └ [+197 more paths]
+ First Load JS shared by all            87 kB
  ├ chunks/23-0627c91053ca9399.js        31.5 kB
  ├ chunks/fd9d1056-2821b0f0cabcd8bd.js  53.6 kB
  └ other shared chunks (total)          1.86 kB


○  (Static)  prerendered as static content
●  (SSG)     prerendered as static HTML (uses getStaticProps)


You can look at project workspace, there is ".next" folder would have been created.

This folder having all production files

.next/server/app/todos

 1.html
 2.html
 3.html
 200.html

How to test?
 npm start
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Nested Path

For eg:
   /[category]/[id]

export async function generateStaticParams() {
  // Imagine this comes from API
  const products = [
    { id: 1, category: "electronics", brand: "apple" },
    { id: 2, category: "electronics", brand: "samsung" },
    { id: 3, category: "fashion", brand: "nike" },
    { id: 4, category: "fashion", brand: "adidas" },
  ];

  return products.map((p) => ({
    category: p.category,
    brand: p.brand,
    id: p.id.toString(),
  }));
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
												SEO Features
...........................................................................................................................................................................................................................................

Next js provides an object and also  function to supply SEO meta information to the page.

SEO data can be given statically or dynamically.

static meta data is given via code, one time

dynamic meta is given via code during runtime.

√ What is your project named? ... seo-app
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
Creating a new Next.js app in G:\IBM\2025\Aug\Nextjs-b1\seo-app.

SEO meta data is supplied inside layout or page or any component.
Meta data is supplied via object using "meta data variable"
meta data must be exported using "export "

syntax
export const metadata = {

}


src/app/layout.js


export const metadata = {
  title: "IBM",
  description: "IBM is the first Hardware and software company in the world",
  //add any meta data options
};

This above code is declarating meta data object having meta data information, this can be part of layout or page .

if it is part of layout, it can be shared across many pages
if it is part of page, it is only used by that page.

Page specific meta data:

src/app/about/page.js
export const metadata = {
    title: "About",
    //add any meta data options
};

export default function About() {
    return <h1>About</h1>
}

..........................................................................................................................................................................................................................................
									Master details and meta data	
...................................................................................................................................................................................................................................

Master Page

app/todos/page.js
import Link from "next/link"

export async function fetchTodos() {
    const url = `https://jsonplaceholder.typicode.com/todos`
    const response = await fetch(url)
    return response.json()
}

export const metadata = {
    title: "Todos Master",
    //add any meta data options
};


export default async function TodosMasterPage() {
    const todos = await fetchTodos()
    return <div>
        <h1>Total Todos {todos.length}</h1>
        <ul>
            {
                todos.map(todo=>{
                    return <li key={todo.id}>
                        <Link href={`/todos/${todo.id}`}>{todo.title}</Link>
                    </li>
                })
            }
        </ul>
    </div>
}


Dynamic meta data:

app/todos/[id]/page.js

export async function fetchTodos() {
    const url = `https://jsonplaceholder.typicode.com/todos`
    const response = await fetch(url)
    return response.json()
}
export async function fetchTodosByid(id) {
    const url = `https://jsonplaceholder.typicode.com/todos/${id}`
    const response = await fetch(url)
    return response.json()
}

export default async function TodoDetailPage(props) {
    const todo = await fetchTodosByid(Number(props.params.id))
    return <div>
        <h2>id {todo.id}</h2>
        <p>title {todo.title}</p>
        <p>Status {todo.completed ? 'Ok' : 'Not Completed'}</p>
    </div>
}

//dynamic meta data function
export async function generateMetadata({ params, searchParam }, parent) {
    const id = (await params).id
    const todo = await fetchTodosByid(Number(id))

    //return meta object
    return {
        title: `${todo.title} details`
    }

}

//override funciton which is called during build time in order to prepare the page
export async function generateStaticParams() {
    const todos = await fetchTodos()
    //generate html pages for all todos(200 todos), if you have 200 records, 200 html files
    //to be generated

    return todos.map(todo => {
        //based on id only the pages are generated, id value must be string always.
        let id = todo.id.toString()
        return {
            //id: id
            id
        }
    });
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
		         						 How to improve loading performance
.....................................................................................................................................................................................................................................

SSR with React and Next.js helps improve the perceived loading performance by showing a non interactive page to the user as soon as possible.

Only HTML can be sent once the data fetching is over.

Streaming allows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client.

This enables part of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered.


How to break down into chunks?

  React mental model is component driven, each component we can treat as chunk.

eg:
  if a component have priority or that dont rely on data can be sent first (eg layouts),so the react can hydration eariler....
  if components has less priority, or depends data to be sent later...

How to implement streaming?
 You have to split code into segments

1.static code which does not depend on data
2.dynamic code which depends on data.

if you wrap any component with "Suspense Boundary" which is async, can be rendered later.

if the component relays on data fetching, delays with timers, delays with network connections......

............................................................................................................................................................................................

loading.js
  	 This is file which has function that function will be suppled fallback UI / loading UI.


√ What is your project named? ... streaming-loading
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
Creating a new Next.js app in G:\IBM\2025\Aug\Nextjs-b1\streaming-loading.



src/app/components/greeter.jsx
export default function Greeter(){
     return <h1>Greeter</h1>
}

src/app/dashboard/page.js
import React from 'react'


const Welcome = React.lazy(() => {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, 10000, import('../components/greeter'))
    })
})

export default function Dashboard() {

    return <div>
        <h1>Header</h1>
        <Welcome />
    </div>
}

http://localhost:3000/dashboard

After running, you dont see any ui in the browser, because it takes so much time, now we need to enable streaming.

How to enable streaming?

1.Via React.Supsense
2.loading.js file -  which internally wraps the page within React.Suspense boundary .


After adding loading.js
src/app/dashboard/loading.js
export default function Fallback(){
    return <h1>Loading....</h1>
}

Component Hierachy:

<React.Suspsense fallback={Fallback}>
	<Page/>
</Reac.Supsense>

There is another use case where i dont want to put the entire page into React.Supsense only i want to enable portions of the page into React.Suspsense.


src/app/components/greeter.jsx
export default function Greeter(){
    return <h1>Greeter</h1>
}
src/app/components/hello.jsx
export default function Hello(){
    return <h1>Hello</h1>
}
src/app/components/hai.jsx
export default function Hai(){
    return <h1>Hai</h1>
}

src/app/dashboard/page.js
import React from "react"

const Welcome = React.lazy(() => {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, 10000, import('../components/greeter'))
    })
})
const Hello = React.lazy(() => {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, 9000, import('../components/hello'))
    })
})
const Hai = React.lazy(() => {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, 8000, import('../components/hai'))
    })
})
export default function DashBoard() {

    return <div>
        <h1>Header</h1>
        <React.Suspense fallback={<h1>Welcome is loading...</h1>}>
            <Welcome />
        </React.Suspense>
        <React.Suspense fallback={<h1>Hello is loading...</h1>}>
            <Hello />
        </React.Suspense>
        <React.Suspense fallback={<h1>Hai is loading...</h1>}>
            <Hai />
        </React.Suspense>
        <h2>Footer</h2>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									API calls and Streaming
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

src/app/posts/page.js
import React, { Suspense } from "react";

//component 
export async function Posts() {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts', {
        cache: 'no-store'
    })
    const posts = await res.json()
    return <ul className="space-y-2">
        {posts.slice(0, 5).map(post => {
            return <li className="p-2 border rounded-lg shadow-sm" key={post.id}>
                <h3 className="font-bold">{post.title}</h3>
                <p className="text-sm text-gray-600">{post.body}</p>
            </li>
        })}
    </ul>
}

const Welcome = React.lazy(() => {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, 10000, import('../components/greeter'))
    })
})

export default function PostsPage() {

    return <div className="p-6">
        <h1 className="text-xl font-bold mb-4">Posts (Heading)</h1>
        {/* wrap Posts Component into suspense */}
        <Suspense fallback={<p className="text-blue-600 font-bold">Posts Loading....</p>}>
           		 <Posts />
        </Suspense>
        <Suspense fallback={<p className="text-blue-600 font-bold">Welcome Loading....</p>}>
            <Welcome />
        </Suspense>
        <h2>
            Footer
        </h2>
    </div>

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Error Handling In next.js
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders.


Introducing Error Boundaries:

     A JavaScript error in a part of the UI shouldn’t break the whole app. To solve this problem for React users, React 16 introduces a new concept of an “error boundary”.

    Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.

Error Boundaries in Next.js:
&&&&&&&&&&&&&&&&&
  Error handling in next.js is built up on React error boundaries and extends them with spcific next.js features for both server and client components.

Types of Errors In Next.js:

1.Page specific errors -  error.js
2.API Route Errors - error.js
3.Global errors -global-error.js or error.js
4.Not-Found Pages - not-found.js

Error Handling Strategies:

1.Excepted Errors -  form validation, failed data fetches
2.UnCaught Exceptions - Handleded with help of errorboundaries - error.jsx
3.404 Handling  - not-found.jsx - notFound()

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										UnCaught Exceptions
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

√ What is your project named? ... exception-app
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

app/users/[id]/
|	page.jsx	
|	error.jsx
|	layout.jsx
||	loading.jsx
|	
 not-found-jsx
 error-jsx or global-error.jsx


Use case: Route Specfic  Not Found Testing:

app/users/[id]/not-found.jsx

src/app/users/[id]/page.js
import { notFound } from "next/navigation";

async function getUser(id) {
  const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {
    cache: "no-store",
  });
  if (res.status === 404) {
    notFound(); // triggers app/not-found.jsx
  }
  if (!res.ok) {
    throw new Error("Failed to fetch user"); // triggers error.jsx
  }

  return res.json();
}

export default async function UserPage({ params }) {
  const user = await getUser((await params).id);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold">User Details</h1>
      <p><b>ID:</b> {user.id}</p>
      <p><b>Name:</b> {user.name}</p>
      <p><b>Email:</b> {user.email}</p>
    </div>
  );
}

Testing;
http://localhost:3000/users/1

Response:

User Details
ID: 1
Name: Leanne Graham
Email: Sincere@april.biz

http://localhost:3000/users/999

404 - User Not Found
The user you are looking for doesn’t exist.

Now here  the not-found.js is automatically caught.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Use case: Global Not Found Testing
***********************************************************************************************************************************************************
src/app/not-found.jsx

export  default function NotFound(){
    return <h1 className="text-center mt-10">oops!The Page you requested not found</h1>
}

Testing :
http://localhost:3000/posts

You will get error ,and fallback to this NotFound
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										UnCaught Exceptions
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Page secific errors:

src/app/users/[id]/error.jsx
'use client'

export default function Error({ error, reset }) {

    return <div className="p-4 bg-red-100 rounded">
        <h2 className="text-red-700 font-bold">Something Went Wrong!</h2>
        <p>{error.message}</p>
        <button className="mt-2 px-3 py-1 beg-red-600 text-white rounded" >Try Again</button>
    </div>
}

src/app/error.jsx
'use client'

export default function Error({ error, reset }) {

    return <div className="p-4 bg-red-100 rounded">
        <h2 className="text-red-700 font-bold">Something Went Wrong!</h2>
        <p>{error.message}</p>
        <button className="mt-2 px-3 py-1 beg-red-600 text-white rounded" >Try Again</button>
    </div>
}
This is global error handler, which is called for any error in your app.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	..........................................................................................................................................................................................................................................
						Caching,Revalidation,ISR
...........................................................................................................................................................................................
What is caching?

 Caching means we dont need to call method more number of times if that method return same value.

Normal function execution

function add(a,b){
   console.log('add is called')
   return a + b
}

add(1,1)
add(1,1)
add(1,1)
add(1,1)
add(1,1)

here function takes same input, returns same output,but it is called evertime...
This approach degrades app performance, instead the returned value can be saved in memory or some other place, with same arg , if method called, we dont need to invoke again and again, rather returns result from the memory or some place which is called cache.

Request Memoization:

         if "fetch" function is called in a single tree  with same url for same data no of times
that means if you call in the layout, again if call in nested layout , again in page , inside page  with in generateMetadata, generateStaticParams... fetch call is cached in the layout itself..

<layout> - fetch('/someapi') - called and cached
  |
  <page> - fetch('/someapi') - will take from cache, no api call is made against    server
   |
   generateMetadata -fetch('/someapi') -will take from cache, no api call is made against server
   |
   generateStaticParams-fetch('/someapi') -will take from cache, no api call is made  against server
   |
   -Render completed - cache is reset.


  "React extends the fetch API to automatically memoize requests that have the same URL and options.
 This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once."

What if i want to use other than fetch api, like axios?

 you can use axios, but i lacks memoziation , that means that api is not cached by default.

 if want caching with axios, "react cache"

 const cachedFn = cache(fn);
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&											Caching implementation
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
√ What is your project named? ... caching-isr
√ Would you like to use TypeScript? ... No / Yes
√ Which linter would you like to use? » None
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack? (recommended) ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

export async function getTime(){
    const url ='https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    const response = await fetch(url)
    const data = await response.json()
    return data 
}

export default async function TimeCachePage(){
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
After running:
http://localhost:3000/timecache/Kolkata

You can see the result is time updated whenever you refresh the page.
You are getting live data, meaning that "caching is disabled by default".
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Enabling Cache
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

We can enable cache as part of fetch api or through route segment options


export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //next js has extended fetch api to support server cache.
    //{cache:'force-cache'} - option only for next js not for regular apis
    
    const response = await fetch(url, { cache: 'force-cache' })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								   Cache Configuration via Route Segment Options

Route Segment options are global variables provided by next.js to supply global settings or page level or layout level settings.
https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config

Every segment options variable must be exported by default when we override in our code where ever, like page,layout,root layouer
syntax
export const variableName=overridenValue

eg:

src/app/timecache/[city]/page.js
//route segment options
//to enable cache
// export const fetchCache = 'force-cache'

//to disable cache

export const fetchCache = 'force-no-store'


export async function getTime() {
    const url = `https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata`
    const response = await fetch(url, { cache: 'force-cache' })
    return await response.json()
}
export async function getTime_v2() {
    const url = `https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata`
    const response = await fetch(url)
    return await response.json()
}

export default async function TimeCachePage() {
    const data = await getTime()
    const data1 = await getTime_v2()
    return <div className="m-20">
        <h1 className="font-bold">Time Now V1: {new Date(data.dateTime).toLocaleTimeString()}</h1>
        <h1 className="font-bold">Time Now V2: {new Date(data1.dateTime).toLocaleTimeString()}</h1>

    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Layout or root layout level route Segment options
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

if you define segments options in layout level or root layout level, that options will be applied across the application or with in the nested layout level.
src/app/layout.js
 
export const fetchCache = 'force-no-store'


export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

Based on the above code, the cache will be enabled across the application
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Can we override global settings 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

We can override the global settings inside page or layout or as part of fetch api.


src/app/timecache/[id]/page.js

//route segment option
//disable cache for this page
export const fetchCache = 'force-no-store'

export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //next js has extended fetch api to support server cache.
    //{cache:'force-cache'} - option only for next js not for regular apis

    // const response = await fetch(url, { cache: 'force-cache' })
    const response = await fetch(url)
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&										Enabling and overriding cache configuration at fetch api level

export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //next js has extended fetch api to support server cache.
    //{cache:'force-cache'} - option only for next js not for regular apis

    // const response = await fetch(url, { cache: 'force-cache' })
    const response = await fetch(url, { cache: 'no-store' })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
						&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								   Cache Configuration via Route Segment Options

Route Segment options are global variables provided by next.js to supply global settings or page level or layout level settings.
https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config

Every segment options variable must be exported by default when we override in our code where ever, like page,layout,root layouer
syntax
export const variableName=overridenValue

eg:

src/app/timecache/[city]/page.js
//route segment options
//to enable cache
// export const fetchCache = 'force-cache'

//to disable cache

export const fetchCache = 'force-no-store'


export async function getTime() {
    const url = `https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata`
    const response = await fetch(url, { cache: 'force-cache' })
    return await response.json()
}
export async function getTime_v2() {
    const url = `https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata`
    const response = await fetch(url)
    return await response.json()
}

export default async function TimeCachePage() {
    const data = await getTime()
    const data1 = await getTime_v2()
    return <div className="m-20">
        <h1 className="font-bold">Time Now V1: {new Date(data.dateTime).toLocaleTimeString()}</h1>
        <h1 className="font-bold">Time Now V2: {new Date(data1.dateTime).toLocaleTimeString()}</h1>

    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Layout or root layout level route Segment options
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

if you define segments options in layout level or root layout level, that options will be applied across the application or with in the nested layout level.
src/app/layout.js
 
export const fetchCache = 'force-no-store'


export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

Based on the above code, the cache will be enabled across the application
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Can we override global settings 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

We can override the global settings inside page or layout or as part of fetch api.


src/app/timecache/[id]/page.js

//route segment option
//disable cache for this page
export const fetchCache = 'force-no-store'

export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //next js has extended fetch api to support server cache.
    //{cache:'force-cache'} - option only for next js not for regular apis

    // const response = await fetch(url, { cache: 'force-cache' })
    const response = await fetch(url)
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&										Enabling and overriding cache configuration at fetch api level

export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //next js has extended fetch api to support server cache.
    //{cache:'force-cache'} - option only for next js not for regular apis

    // const response = await fetch(url, { cache: 'force-cache' })
    const response = await fetch(url, { cache: 'no-store' })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Revalidation: How to clear the cache 
...........................................................................................................................................................................................................................................

There are two ways we can clear the cache
1.Time based revalidation
2.OnDemand Revalidation

Time based revalidation;
 You can clear the cache based on timer or timeout

revalidation value can be given as part of the fetch or part of page/layout as "route segement options"

Time based revalidation as part of fetch api
.................................................................................
//With cache and revalidation with timer
export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    const response = await fetch(url, { cache: 'force-cache', next: { revalidate: 2 } })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()
    return <>
        <h1 className="font-bold">Time Now: {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </>
}

Time based revalidation as part of page or layout as route segement option

//route segment option
// export const fetchCache = 'default-cache'
export const revalidate = 2
export const fetchCache = 'default-cache'

export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    //cache will be cleared after every 2sec
    // const response = await fetch(url, { cache: 'force-cache', next: { revalidate: 2 } })
    const response = await fetch(url, { next: {revalidate: 2}})
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()

    return <div className="m-20">
        <h1 className="font-bold">Time Now : {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </div>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									OnDemand Revalidation
.......................................................................................................................................................................................................................

OnDemand revalidation is done via api call, when you call api, validation triggers

Steps:
1.You have to write rest api, which revalidates cache.
 1..1. You can use path 
 1..2. You can use tag
 1..3  You can use both


Path Based:
 Based on url we can clear cache

/api/products - clear the cache related to products route

src/app/api/revalidate/route.js
import { revalidatePath } from "next/cache"
import { NextResponse } from "next/server"

export async function GET(request, { params }) {
    //get the path of the revalidation
    const path = request.nextUrl.searchParams.get('path') || '/timecache/Kolkata'
    //call revalidate api
    revalidatePath(path)
    return NextResponse.json({ revalidate: true, now: new Date(), cache: 'no-store' })

}

src/app/timecache\[city]\page.js
//on demand revalidation with path
export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    const response = await fetch(url, { cache: 'force-cache' })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()
    return <>
        <h1 className="font-bold">Time Now: {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </>
}

Tag Based:
.....................

src/app/api/revalidate/route.js

export async function GET(request, { params }) {
    //get the tag of the revalidation
    const tag = request.nextUrl.searchParams.get('timerTag') || 'timerTag'
    //call revalidate api
    revalidateTag(tag)
    return NextResponse.json({ revalidate: true, now: new Date(), cache: 'no-store' })

}
//on demand revalidation with tag
export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    const response = await fetch(url, {
        cache: 'force-cache', next: {
            tags: ['timerTag']
        }
    })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()
    return <>
        <h1 className="font-bold">Time Now: {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </>
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										ISR
							SSG + Caching + Revalidation = ISR
				   		     		ISR- Incremental Static Rendering
............................................................................................................................................................................................................

ISR  =SSG +Caching + Revalidation.

SSG:
  -Building pages during build time.
  -Incase if page uses data that means fetching data from apis,that data only used    during build phase
  -page is built and cache it 
  
Revalidation:
  -When we want fresh data for the page
  -during revalidation, cache is cleared so that the page also need to be    rerendered..

"Incrementatal static rendering is nothing but create pages during build time and cache it, if any data change for the particular page, re render that page, after clearing the cache either by using time based or on demand or both"

ISR = SSR + Staic Renderning + Dynamic Rendering + SSG +request time


How to implement ISR?

1.Enable Cache
2.Select Revalidation pattern
3.override generateStaticParams method where you have to generate page, after build time, the page is cached.
4.revalidate the pre build page, using revalidation pattern so that the page is rebuilt.

During SSG, the pages are cached by default.

Once the app is gone to the production, after that if you want to rebuild page you can apply revalidation process.

ISR = SSG + Revalidation.

Eg:
export async function getTime() {
    const url = 'https://www.timeapi.io/api/Time/current/zone?timeZone=Asia/Kolkata'
    const response = await fetch(url, {
        cache: 'force-cache', next: {
            tags: ['timerTag']
        }
    })
    const data = await response.json()
    return data
}

export default async function TimeCachePage() {
    const data = await getTime()
    return <>
        <h1 className="font-bold">Time Now: {new Date(data.dateTime).toLocaleTimeString()}</h1>
    </>
}
export async function generateStaticParams() {
    return [{
        city: 'Kolkata'
    }]
}

Testing:
pm run build

> caching-isr@0.1.0 build
> next build

  ▲ Next.js 14.2.10

   Creating an optimized production build ...
 ✓ Compiled successfully
 ✓ Linting and checking validity of types
 ✓ Collecting page data
 ✓ Generating static pages (7/7)
 ✓ Collecting build traces
 ✓ Finalizing page optimization

Route (app)                              Size     First Load JS
┌ ○ /                                    5.25 kB        92.3 kB
├ ○ /_not-found                          871 B          87.9 kB
├ ƒ /api/revalidate                      0 B                0 B
└ ● /timecache/[city]                    137 B          87.2 kB
    └ /timecache/Kolkata
+ First Load JS shared by all            87.1 kB
  ├ chunks/23-8d0b25cd7d597713.js        31.6 kB
  ├ chunks/fd9d1056-2821b0f0cabcd8bd.js  53.6 kB
  └ other shared chunks (total)          1.86 kB


○  (Static)   prerendered as static content
●  (SSG)      prerendered as static HTML (uses getStaticProps)
ƒ  (Dynamic)  server-rendered on demand


nextjs\caching-isr>npm start

> caching-isr@0.1.0 start
> next start

  ▲ Next.js 14.2.10
  - Local:        http://localhost:3000

 ✓ Starting...
 ✓ Ready in 418ms

